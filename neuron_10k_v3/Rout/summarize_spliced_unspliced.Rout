
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in seq_len(length(args))) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages({
+   library(tximeta)
+   library(dplyr)
+   library(ggplot2)
+   library(zeallot)
+   library(BUSpaRse)
+   library(SummarizedExperiment)
+   library(velocyto.R)
+   library(scater)
+ })
> 
> print(topdir)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/neuron_10k_v3"
> print(tx2gene)
[1] "/tungstenfs/groups/gbioinfo/DB/GENCODE/Mouse/release_M21/tx2gene/gencode.vM21.annotation.tx2gene_full.rds"
> print(outrds)
[1] "output/summarize_spliced_unspliced.rds"
> 
> tx2gene <- readRDS(tx2gene)
> 
> ## ========================================================================= ##
> ## Read quantifications and create SummarizedExperiment objects
> ## ========================================================================= ##
> ## CellRanger + velocyto
> loom <- velocyto.R::read.loom.matrices(file.path(topdir, "quants/cellranger/neuron_10k_v3/velocyto/neuron_10k_v3.loom"))
reading loom file via hdf5r...
> velocyto <- SummarizedExperiment(
+   assays = list(spliced = loom$spliced,
+                 unspliced = loom$unspliced)
+ )
> colnames(velocyto) <- gsub("neuron_10k_v3:", "", gsub("x$", "", colnames(velocyto)))
> 
> ## cDNA/introns separately (with decoys)
> cdna <- tximeta(coldata = data.frame(
+   names = "neuron_10k_v3",
+   files = file.path(topdir, "quants/salmon_gencodevM21_cDNA_intronsasdecoy/alevin/quants_mat.gz"),
+   stringsAsFactors = FALSE
+ ), type = "alevin")
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
> cdna <- cdna[grep("I\\.$", rownames(cdna), invert = TRUE), ]
> introns <- tximeta(coldata = data.frame(
+   names = "neuron_10k_v3",
+   files = file.path(topdir, "quants/salmon_gencodevM21_introns_cDNAasdecoy/alevin/quants_mat.gz"),
+   stringsAsFactors = FALSE
+ ), type = "alevin")
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
> introns <- introns[grep("I\\.$", rownames(introns)), ]
> ucounts <- round(assay(introns, "counts"))
> scounts <- round(assay(cdna, "counts"))
> rownames(ucounts) <- gsub("\\.I\\.$", "", rownames(ucounts))
> rownames(scounts) <- gsub("\\.$", "", rownames(scounts))
> ucounts <- ucounts[rownames(ucounts) %in% rownames(scounts), colnames(ucounts) %in% colnames(scounts)]
> ucounts2 <- scounts
> ucounts2[] <- 0
> tm <- as(ucounts, "dgTMatrix")
> ucounts2[cbind(match(rownames(ucounts)[tm@i + 1], rownames(ucounts2)), 
+                match(colnames(ucounts)[tm@j + 1], colnames(ucounts2)))] <- tm@x
> stopifnot(all(rownames(ucounts2) == rownames(scounts)))
> stopifnot(all(colnames(ucounts2) == colnames(scounts)))
> stopifnot(sum(ucounts2) == sum(ucounts))
> cdna_introns_decoy <- SummarizedExperiment(
+   assays = list(spliced = scounts,
+                 unspliced = ucounts2)
+ )
> rownames(cdna_introns_decoy) <- scater::uniquifyFeatureNames(
+   ID = rownames(cdna_introns_decoy),
+   names = tx2gene$gene_name[match(rownames(cdna_introns_decoy), tx2gene$gene_id)]
+ )
> 
> ## cDNA + introns
> cdna_introns <- tximeta(coldata = data.frame(
+   names = "neuron_10k_v3",
+   files = file.path(topdir, "quants/salmon_gencodevM21_cDNA_introns/alevin/quants_mat.gz"),
+   stringsAsFactors = FALSE
+ ), type = "alevin")
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
> uidx <- grep("\\.I\\.$", rownames(cdna_introns))
> sidx <- grep("\\.I\\.$", rownames(cdna_introns), invert = TRUE)
> ucounts <- round(assay(cdna_introns, "counts")[uidx, ])
> scounts <- round(assay(cdna_introns, "counts")[sidx, ])
> rownames(ucounts) <- gsub("\\.I\\.$", "", rownames(ucounts))
> rownames(scounts) <- gsub("\\.$", "", rownames(scounts))
> ucounts <- ucounts[rownames(ucounts) %in% rownames(scounts), ]
> ucounts2 <- scounts
> ucounts2[] <- 0
> tm <- as(ucounts, "dgTMatrix")
> ucounts2[cbind(match(rownames(ucounts)[tm@i + 1], rownames(ucounts2)), 
+                match(colnames(ucounts)[tm@j + 1], colnames(ucounts2)))] <- tm@x
> stopifnot(all(rownames(ucounts2) == rownames(scounts)))
> stopifnot(all(colnames(ucounts2) == colnames(scounts)))
> stopifnot(sum(ucounts2) == sum(ucounts))
> cdna_introns <- SummarizedExperiment(
+   assays = list(spliced = scounts,
+                 unspliced = ucounts2)
+ )
> rownames(cdna_introns) <- scater::uniquifyFeatureNames(
+   ID = rownames(cdna_introns),
+   names = tx2gene$gene_name[match(rownames(cdna_introns), tx2gene$gene_id)]
+ )
> 
> ## cDNA + collapsed introns
> cdna_intronscollapsed <- tximeta(coldata = data.frame(
+   names = "neuron_10k_v3",
+   files = file.path(topdir, "quants/salmon_gencodevM21_cDNA_intronscollapsed/alevin/quants_mat.gz"),
+   stringsAsFactors = FALSE
+ ), type = "alevin")
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
> uidx <- grep("\\.I\\.$", rownames(cdna_intronscollapsed))
> sidx <- grep("\\.I\\.$", rownames(cdna_intronscollapsed), invert = TRUE)
> ucounts <- round(assay(cdna_intronscollapsed, "counts")[uidx, ])
> scounts <- round(assay(cdna_intronscollapsed, "counts")[sidx, ])
> rownames(ucounts) <- gsub("\\.I\\.$", "", rownames(ucounts))
> rownames(scounts) <- gsub("\\.$", "", rownames(scounts))
> ucounts <- ucounts[rownames(ucounts) %in% rownames(scounts), ]
> ucounts2 <- scounts
> ucounts2[] <- 0
> tm <- as(ucounts, "dgTMatrix")
> ucounts2[cbind(match(rownames(ucounts)[tm@i + 1], rownames(ucounts2)), 
+                match(colnames(ucounts)[tm@j + 1], colnames(ucounts2)))] <- tm@x
> stopifnot(all(rownames(ucounts2) == rownames(scounts)))
> stopifnot(all(colnames(ucounts2) == colnames(scounts)))
> stopifnot(sum(ucounts2) == sum(ucounts))
> cdna_intronscollapsed <- SummarizedExperiment(
+   assays = list(spliced = scounts,
+                 unspliced = ucounts2)
+ )
> rownames(cdna_intronscollapsed) <- scater::uniquifyFeatureNames(
+   ID = rownames(cdna_intronscollapsed),
+   names = tx2gene$gene_name[match(rownames(cdna_intronscollapsed), tx2gene$gene_id)]
+ )
> 
> ## spliced + unspliced
> spliced_unspliced <- tximeta(coldata = data.frame(
+   names = "neuron_10k_v3",
+   files = file.path(topdir, "quants/salmon_gencodevM21_spliced_unspliced/alevin/quants_mat.gz"),
+   stringsAsFactors = FALSE
+ ), type = "alevin")
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
> uidx <- grep("_unspliced$", rownames(spliced_unspliced))
> sidx <- grep("_unspliced$", rownames(spliced_unspliced), invert = TRUE)
> ucounts <- round(assay(spliced_unspliced, "counts")[uidx, ])
> scounts <- round(assay(spliced_unspliced, "counts")[sidx, ])
> rownames(ucounts) <- gsub("_unspliced$", "", rownames(ucounts))
> ucounts <- ucounts[rownames(ucounts) %in% rownames(scounts), ]
> ucounts2 <- scounts
> ucounts2[] <- 0
> tm <- as(ucounts, "dgTMatrix")
> ucounts2[cbind(match(rownames(ucounts)[tm@i + 1], rownames(ucounts2)), 
+                match(colnames(ucounts)[tm@j + 1], colnames(ucounts2)))] <- tm@x
> stopifnot(all(rownames(ucounts2) == rownames(scounts)))
> stopifnot(all(colnames(ucounts2) == colnames(scounts)))
> stopifnot(sum(ucounts2) == sum(ucounts))
> spliced_unspliced <- SummarizedExperiment(
+   assays = list(spliced = scounts,
+                 unspliced = ucounts2)
+ )
> rownames(spliced_unspliced) <- scater::uniquifyFeatureNames(
+   ID = rownames(spliced_unspliced),
+   names = tx2gene$gene_name[match(rownames(spliced_unspliced), tx2gene$gene_id)]
+ )
> 
> 
> ## spliced
> spliced <- tximeta(coldata = data.frame(
+   names = "neuron_10k_v3",
+   files = file.path(topdir, "quants/salmon_gencodevM21_spliced/alevin/quants_mat.gz"),
+   stringsAsFactors = FALSE
+ ), type = "alevin")
importing quantifications
reading in alevin gene-level counts across cells with fishpond
found matching transcriptome:
[ GENCODE - Mus musculus - release M21 ]
loading existing TxDb created: 2019-10-24 09:43:29
Loading required package: GenomicFeatures
Loading required package: AnnotationDbi

Attaching package: 'AnnotationDbi'

The following object is masked from 'package:dplyr':

    select

generating gene ranges
loading existing gene ranges created: 2019-10-24 09:44:11
fetching genome info for GENCODE
> rownames(spliced) <- scater::uniquifyFeatureNames(
+   ID = rownames(spliced),
+   names = tx2gene$gene_name[match(rownames(spliced), tx2gene$gene_id)]
+ )
> 
> ## kallisto/bustools
> ## separate
> kallistodir <- file.path(topdir, "quants/kallisto_bustools_gencodevM21_isoseparate_exonfull_cDNA_introns")
> c(spliced_bus, unspliced_bus) %<-% 
+   read_velocity_output(spliced_dir = kallistodir,
+                        spliced_name = "spliced",
+                        unspliced_dir = kallistodir,
+                        unspliced_name = "unspliced")
> rownames(spliced_bus) <- gsub("\\.$", "", rownames(spliced_bus))
> rownames(unspliced_bus) <- gsub("\\.$", "", rownames(unspliced_bus))
> stopifnot(all(rownames(spliced_bus) == rownames(unspliced_bus)))
> kallistobus_cells <- intersect(colnames(spliced_bus), colnames(unspliced_bus))
> kallistobus_separate <- SummarizedExperiment(
+   assays = list(spliced = spliced_bus[, kallistobus_cells],
+                 unspliced = unspliced_bus[, kallistobus_cells])
+ )
> rownames(kallistobus_separate) <- scater::uniquifyFeatureNames(
+   ID = rownames(kallistobus_separate),
+   names = tx2gene$gene_name[match(rownames(kallistobus_separate), tx2gene$gene_id)]
+ )
> 
> ## collapse
> kallistodir <- file.path(topdir, "quants/kallisto_bustools_gencodevM21_isocollapse_exonfull_cDNA_introns")
> c(spliced_bus, unspliced_bus) %<-% 
+   read_velocity_output(spliced_dir = kallistodir,
+                        spliced_name = "spliced",
+                        unspliced_dir = kallistodir,
+                        unspliced_name = "unspliced")
> rownames(spliced_bus) <- gsub("\\.$", "", rownames(spliced_bus))
> rownames(unspliced_bus) <- gsub("\\.$", "", rownames(unspliced_bus))
> stopifnot(all(rownames(spliced_bus) == rownames(unspliced_bus)))
> kallistobus_cells <- intersect(colnames(spliced_bus), colnames(unspliced_bus))
> kallistobus_collapse <- SummarizedExperiment(
+   assays = list(spliced = spliced_bus[, kallistobus_cells],
+                 unspliced = unspliced_bus[, kallistobus_cells])
+ )
> rownames(kallistobus_collapse) <- scater::uniquifyFeatureNames(
+   ID = rownames(kallistobus_collapse),
+   names = tx2gene$gene_name[match(rownames(kallistobus_collapse), tx2gene$gene_id)]
+ )
> 
> ## ========================================================================= ##
> ## subset to shared cells/genes
> ## ========================================================================= ##
> shared_cells <- Reduce(intersect, list(colnames(velocyto),
+                                        colnames(cdna_introns_decoy),
+                                        colnames(cdna_introns),
+                                        colnames(cdna_intronscollapsed),
+                                        colnames(spliced_unspliced),
+                                        colnames(spliced),
+                                        colnames(kallistobus_separate),
+                                        colnames(kallistobus_collapse)))
> shared_genes <- Reduce(intersect, list(rownames(velocyto),
+                                        rownames(cdna_introns_decoy),
+                                        rownames(cdna_introns),
+                                        rownames(cdna_intronscollapsed),
+                                        rownames(spliced_unspliced),
+                                        rownames(spliced),
+                                        rownames(kallistobus_separate),
+                                        rownames(kallistobus_collapse)))
> 
> velocyto <- velocyto[shared_genes, shared_cells]
> cdna_introns_decoy <- cdna_introns_decoy[shared_genes, shared_cells]
> cdna_introns <- cdna_introns[shared_genes, shared_cells]
> cdna_intronscollapsed <- cdna_intronscollapsed[shared_genes, shared_cells]
> spliced_unspliced <- spliced_unspliced[shared_genes, shared_cells]
> spliced <- spliced[shared_genes, shared_cells]
> kallistobus_separate <- kallistobus_separate[shared_genes, shared_cells]
> kallistobus_collapse <- kallistobus_collapse[shared_genes, shared_cells]
> 
> ## ========================================================================= ##
> ## Plot
> ## ========================================================================= ##
> df0 <- dplyr::bind_rows(
+   data.frame(method = "velocyto",
+              spliced_count = rowSums(assay(velocyto, "spliced")),
+              unspliced_count = rowSums(assay(velocyto, "unspliced")),
+              total_count = rowSums(assay(velocyto, "spliced")) + 
+                rowSums(assay(velocyto, "unspliced")),
+              stringsAsFactors = FALSE),
+   data.frame(method = "cdna_introns_decoy",
+              spliced_count = rowSums(assay(cdna_introns_decoy, "spliced")),
+              unspliced_count = rowSums(assay(cdna_introns_decoy, "unspliced")),
+              total_count = rowSums(assay(cdna_introns_decoy, "spliced")) + 
+                rowSums(assay(cdna_introns_decoy, "unspliced")),
+              stringsAsFactors = FALSE),
+   data.frame(method = "cdna_introns",
+              spliced_count = rowSums(assay(cdna_introns, "spliced")),
+              unspliced_count = rowSums(assay(cdna_introns, "unspliced")),
+              total_count = rowSums(assay(cdna_introns, "spliced")) + 
+                rowSums(assay(cdna_introns, "unspliced")),
+              stringsAsFactors = FALSE),
+   data.frame(method = "cdna_intronscollapsed",
+              spliced_count = rowSums(assay(cdna_intronscollapsed, "spliced")),
+              unspliced_count = rowSums(assay(cdna_intronscollapsed, "unspliced")),
+              total_count = rowSums(assay(cdna_intronscollapsed, "spliced")) + 
+                rowSums(assay(cdna_intronscollapsed, "unspliced")),
+              stringsAsFactors = FALSE),
+   data.frame(method = "spliced_unspliced",
+              spliced_count = rowSums(assay(spliced_unspliced, "spliced")),
+              unspliced_count = rowSums(assay(spliced_unspliced, "unspliced")),
+              total_count = rowSums(assay(spliced_unspliced, "spliced")) + 
+                rowSums(assay(spliced_unspliced, "unspliced")),
+              stringsAsFactors = FALSE),
+   data.frame(method = "spliced",
+              spliced_count = rowSums(assay(spliced, "counts")),
+              total_count = rowSums(assay(spliced, "counts")),
+              stringsAsFactors = FALSE),
+   data.frame(method = "kallistobus_separate",
+              spliced_count = rowSums(assay(kallistobus_separate, "spliced")),
+              unspliced_count = rowSums(assay(kallistobus_separate, "unspliced")),
+              total_count = rowSums(assay(kallistobus_separate, "spliced")) + 
+                rowSums(assay(kallistobus_separate, "unspliced")),
+              stringsAsFactors = FALSE),
+   data.frame(method = "kallistobus_collapse",
+              spliced_count = rowSums(assay(kallistobus_collapse, "spliced")),
+              unspliced_count = rowSums(assay(kallistobus_collapse, "unspliced")),
+              total_count = rowSums(assay(kallistobus_collapse, "spliced")) + 
+                rowSums(assay(kallistobus_collapse, "unspliced")),
+              stringsAsFactors = FALSE)
+ ) %>% 
+   tidyr::gather(key = "type", value = "numi", -method)
> 
> pdf(gsub("rds", "pdf", outrds), width = 9, height = 9)
> ggplot(df0 %>% dplyr::mutate(
+   type = factor(type, levels = c("spliced_count", "unspliced_count", "total_count"))), 
+        aes(x = method, y = numi + 1)) + 
+   geom_violin(aes(fill = method), alpha = 0.25, scale = "width") + 
+   geom_boxplot(width = 0.025) + 
+   facet_wrap(~ type, ncol = 1) + 
+   theme_bw() + 
+   theme(legend.position = "none",
+         axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
+   scale_y_log10() + 
+   ggtitle("Total count per gene, across all cells")
Warning messages:
1: Removed 53892 rows containing non-finite values (stat_ydensity). 
2: Removed 53892 rows containing non-finite values (stat_boxplot). 
> 
> df1 <- dplyr::bind_rows(
+   data.frame(method = "velocyto",
+              fraction_unspliced = rowSums(assay(velocyto, "unspliced"))/
+                (rowSums(assay(velocyto, "unspliced")) + 
+                   rowSums(assay(velocyto, "spliced"))),
+              stringsAsFactors = FALSE),
+   data.frame(method = "cdna_introns_decoy", 
+              fraction_unspliced = rowSums(assay(cdna_introns_decoy, "unspliced"))/
+                (rowSums(assay(cdna_introns_decoy, "unspliced")) + 
+                   rowSums(assay(cdna_introns_decoy, "spliced"))),
+              stringsAsFactors = FALSE),
+   data.frame(method = "cdna_introns", 
+              fraction_unspliced = rowSums(assay(cdna_introns, "unspliced"))/
+                (rowSums(assay(cdna_introns, "unspliced")) + 
+                   rowSums(assay(cdna_introns, "spliced"))),
+              stringsAsFactors = FALSE),
+   data.frame(method = "cdna_intronscollapsed", 
+              fraction_unspliced = rowSums(assay(cdna_intronscollapsed, "unspliced"))/
+                (rowSums(assay(cdna_intronscollapsed, "unspliced")) + 
+                   rowSums(assay(cdna_intronscollapsed, "spliced"))),
+              stringsAsFactors = FALSE),
+   data.frame(method = "spliced_unspliced", 
+              fraction_unspliced = rowSums(assay(spliced_unspliced, "unspliced"))/
+                (rowSums(assay(spliced_unspliced, "unspliced")) + 
+                   rowSums(assay(spliced_unspliced, "spliced"))),
+              stringsAsFactors = FALSE),
+   data.frame(method = "kallistobus_separate", 
+              fraction_unspliced = rowSums(assay(kallistobus_separate, "unspliced"))/
+                (rowSums(assay(kallistobus_separate, "unspliced")) + 
+                   rowSums(assay(kallistobus_separate, "spliced"))),
+              stringsAsFactors = FALSE),
+   data.frame(method = "kallistobus_collapse", 
+              fraction_unspliced = rowSums(assay(kallistobus_collapse, "unspliced"))/
+                (rowSums(assay(kallistobus_collapse, "unspliced")) + 
+                   rowSums(assay(kallistobus_collapse, "spliced"))),
+              stringsAsFactors = FALSE)
+ )
> 
> ggplot(df1, aes(x = method, y = fraction_unspliced)) + 
+   geom_violin(aes(fill = method), alpha = 0.25, scale = "width") + 
+   geom_boxplot(width = 0.025) + 
+   theme_bw() + 
+   theme(legend.position = "none",
+         axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) + 
+   ggtitle("Fraction of total gene counts that are 'unspliced'")
Warning messages:
1: Removed 162223 rows containing non-finite values (stat_ydensity). 
2: Removed 162223 rows containing non-finite values (stat_boxplot). 
> 
> ## Correlation between "spliced" counts and counts from 
> ## quantification using only spliced transcripts
> spliced_counts <- assay(spliced, "counts")
> cdna_introns_counts <- assay(cdna_introns, "spliced")
> cdna_intronscollapsed_counts <- assay(cdna_intronscollapsed, "spliced")
> cdna_introns_decoy_counts <- assay(cdna_introns_decoy, "spliced")
> spliced_unspliced_counts <- assay(spliced_unspliced, "spliced")
> kallistobus_separate_counts <- assay(kallistobus_separate, "spliced")
> kallistobus_collapse_counts <- assay(kallistobus_collapse, "spliced")
> velocyto_counts <- assay(velocyto, "spliced")
> ncells <- 100
> df2 <- dplyr::bind_rows(
+   data.frame(method = "velocyto", 
+              correlation = sapply(seq_len(ncol(spliced))[1:ncells], function(i) {
+                cor(spliced_counts[, i],
+                    velocyto_counts[, i],
+                    method = "spearman")
+              }),
+              stringsAsFactors = FALSE),
+   data.frame(method = "cdna_introns_decoy", 
+              correlation = sapply(seq_len(ncol(spliced))[1:ncells], function(i) {
+                cor(spliced_counts[, i],
+                    cdna_introns_decoy_counts[, i],
+                    method = "spearman")
+              }),
+              stringsAsFactors = FALSE),
+   data.frame(method = "cdna_introns", 
+              correlation = sapply(seq_len(ncol(spliced))[1:ncells], function(i) {
+                cor(spliced_counts[, i],
+                    cdna_introns_counts[, i],
+                    method = "spearman")
+              }),
+              stringsAsFactors = FALSE),
+   data.frame(method = "cdna_intronscollapsed", 
+              correlation = sapply(seq_len(ncol(spliced))[1:ncells], function(i) {
+                cor(spliced_counts[, i],
+                    cdna_intronscollapsed_counts[, i],
+                    method = "spearman")
+              }),
+              stringsAsFactors = FALSE),
+   data.frame(method = "spliced_unspliced", 
+              correlation = sapply(seq_len(ncol(spliced))[1:ncells], function(i) {
+                cor(spliced_counts[, i],
+                    spliced_unspliced_counts[, i],
+                    method = "spearman")
+              }),
+              stringsAsFactors = FALSE),
+   data.frame(method = "kallistobus_separate", 
+              correlation = sapply(seq_len(ncol(spliced))[1:ncells], function(i) {
+                cor(spliced_counts[, i],
+                    kallistobus_separate_counts[, i],
+                    method = "spearman")
+              }),
+              stringsAsFactors = FALSE),
+   data.frame(method = "kallistobus_collapse", 
+              correlation = sapply(seq_len(ncol(spliced))[1:ncells], function(i) {
+                cor(spliced_counts[, i],
+                    kallistobus_collapse_counts[, i],
+                    method = "spearman")
+              }),
+              stringsAsFactors = FALSE)
+ )
> 
> ggplot(df2, aes(x = method, y = correlation)) + 
+   geom_violin(aes(fill = method), alpha = 0.5, scale = "width") + 
+   geom_boxplot(width = 0.025) + 
+   theme_bw() + 
+   theme(legend.position = "none",
+         axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) + 
+   labs(title = "Cell-wise correlation of 'spliced' counts with\ncounts obtained when only considering spliced transcripts",
+        subtitle = paste0(ncells, " cells"))
> dev.off()
null device 
          1 
> 
> saveRDS(list(velocyto = velocyto, cdna_introns_decoy = cdna_introns_decoy, 
+              cdna_introns = cdna_introns, cdna_intronscollapsed = cdna_intronscollapsed,
+              spliced_unspliced = spliced_unspliced, spliced = spliced, 
+              kallistobus_separate = kallistobus_separate, 
+              kallistobus_collapse = kallistobus_collapse), 
+         file = outrds)
> 
> date()
[1] "Mon Oct 28 20:32:26 2019"
> sessionInfo()
R version 3.6.0 (2019-04-26)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /usr/lib64/libopenblas-r0.3.3.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] GenomicFeatures_1.37.5       AnnotationDbi_1.47.1        
 [3] scater_1.13.27               SingleCellExperiment_1.7.11 
 [5] velocyto.R_0.6               Matrix_1.2-17               
 [7] SummarizedExperiment_1.15.10 DelayedArray_0.11.8         
 [9] BiocParallel_1.19.5          matrixStats_0.55.0          
[11] Biobase_2.45.1               GenomicRanges_1.37.17       
[13] GenomeInfoDb_1.21.2          IRanges_2.19.18             
[15] S4Vectors_0.23.25            BiocGenerics_0.31.6         
[17] BUSpaRse_0.99.25             zeallot_0.1.0               
[19] ggplot2_3.2.1                dplyr_0.8.3                 
[21] tximeta_1.3.40              

loaded via a namespace (and not attached):
 [1] nlme_3.1-141             ProtGenerics_1.17.4      bitops_1.0-6            
 [4] bit64_0.9-7              progress_1.2.2           httr_1.4.1              
 [7] tools_3.6.0              backports_1.1.5          irlba_2.3.3             
[10] R6_2.4.0                 vipor_0.4.5              DBI_1.0.0               
[13] lazyeval_0.2.2           mgcv_1.8-29              colorspace_1.4-1        
[16] withr_2.1.2              gridExtra_2.3            tidyselect_0.2.5        
[19] prettyunits_1.0.2        bit_1.1-14               curl_4.2                
[22] compiler_3.6.0           BiocNeighbors_1.3.5      hdf5r_1.0.0             
[25] labeling_0.3             rtracklayer_1.45.6       scales_1.0.0            
[28] askpass_1.1              rappdirs_0.3.1           stringr_1.4.0           
[31] digest_0.6.22            Rsamtools_2.1.7          XVector_0.25.0          
[34] pkgconfig_2.0.3          dbplyr_1.4.2             ensembldb_2.9.6         
[37] BSgenome_1.53.2          rlang_0.4.0              RSQLite_2.1.2           
[40] DelayedMatrixStats_1.7.2 jsonlite_1.6             gtools_3.8.1            
[43] RCurl_1.95-4.12          magrittr_1.5             BiocSingular_1.1.7      
[46] GenomeInfoDbData_1.2.2   ggbeeswarm_0.6.0         Rcpp_1.0.2              
[49] munsell_0.5.0            viridis_0.5.1            lifecycle_0.1.0         
[52] stringi_1.4.3            MASS_7.3-51.4            zlibbioc_1.31.0         
[55] BiocFileCache_1.9.1      grid_3.6.0               blob_1.2.0              
[58] crayon_1.3.4             lattice_0.20-38          Biostrings_2.53.2       
[61] splines_3.6.0            hms_0.5.1                fishpond_1.1.26         
[64] pillar_1.4.2             biomaRt_2.41.9           XML_3.98-1.20           
[67] glue_1.3.1               pcaMethods_1.77.0        data.table_1.12.6       
[70] RcppParallel_4.4.4       vctrs_0.2.0              gtable_0.3.0            
[73] openssl_1.4.1            purrr_0.3.3              tidyr_1.0.0             
[76] assertthat_0.2.1         rsvd_1.0.2               AnnotationFilter_1.9.0  
[79] viridisLite_0.3.0        tibble_2.1.3             beeswarm_0.2.3          
[82] GenomicAlignments_1.21.7 plyranges_1.5.14         memoise_1.1.0           
[85] tximport_1.13.17         cluster_2.1.0            ellipsis_0.3.0          
> 
> proc.time()
   user  system elapsed 
486.950  35.157 526.499 
