
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in seq_len(length(args))) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages({
+   library(BiocParallel)
+   library(BiocSingular)
+ })
> 
> samplenames <- strsplit(samplenames, ",")[[1]]
> 
> print(topdir)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/dentate_gyrus_mouse"
> print(dataset)
[1] "Dentate_gyrus"
> print(helperscript)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/scripts/sce_helpers.R"
> print(tx2gene)
[1] "/tungstenfs/groups/gbioinfo/DB/GENCODE/Mouse/release_M21/tx2gene/gencode.vM21.annotation.tx2gene_full.rds"
> print(cellfile)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Data/GSE95315_dentate_gyrus_mouse/cells_kept_in_scvelo_exampledata.csv"
> print(samplenames)
[1] "p12" "p35"
> print(outrds)
[1] "output/sce/sces_spliced_unspliced.rds"
> 
> source(helperscript)
> 
> tx2gene <- readRDS(tx2gene)
> if (cellfile != "") {
+   cells <- read.csv(cellfile)
+ } else {
+   cells <- NULL
+ }
> 
> sces <- list()
> 
> ## ========================================================================= ##
> ## Read quantifications and create SingleCellExperiment objects
> ## ========================================================================= ##
> ## CellRanger + velocyto
> # sces$velocyto <- read_velocyto(
> #   loomfile = file.path(topdir, paste0("quants/cellranger/", samplename, "/velocyto/", samplename, ".loom")), 
> #   sampleid = samplename
> # )
> 
> ## STARsolo
> sces$starsolo <- do.call(cbind, lapply(samplenames, function(s) {
+   tmp <- read_starsolo(
+     solodir = file.path(topdir, paste0("quants/", s, "/starsolo/Solo.out/Velocyto/raw")),
+     sampleid = s
+   )
+   colnames(tmp) <- paste0(s, "__", colnames(tmp))
+   tmp
+ }))
Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character()
)
Parsed with column specification:
cols(
  X1 = col_character()
)
Parsed with column specification:
cols(
  X1 = col_double(),
  X2 = col_double(),
  X3 = col_double(),
  X4 = col_double(),
  X5 = col_double()
)
Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character()
)
Parsed with column specification:
cols(
  X1 = col_character()
)
Parsed with column specification:
cols(
  X1 = col_double(),
  X2 = col_double(),
  X3 = col_double(),
  X4 = col_double(),
  X5 = col_double()
)
> 
> sces$starsolo_subtr <- do.call(cbind, lapply(samplenames, function(s) {
+   tmp <- read_starsolo_subtract(
+     solodir = file.path(topdir, paste0("quants/", s, "/starsolo/Solo.out")),
+     sampleid = s
+   )
+   colnames(tmp) <- paste0(s, "__", colnames(tmp))
+   tmp
+ }))
Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character()
)
Parsed with column specification:
cols(
  X1 = col_character()
)
Parsed with column specification:
cols(
  X1 = col_double(),
  X2 = col_double(),
  X3 = col_double()
)
Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character()
)
Parsed with column specification:
cols(
  X1 = col_character()
)
Parsed with column specification:
cols(
  X1 = col_double(),
  X2 = col_double(),
  X3 = col_double()
)
Joining, by = c("X1", "X2")
Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character()
)
Parsed with column specification:
cols(
  X1 = col_character()
)
Parsed with column specification:
cols(
  X1 = col_double(),
  X2 = col_double(),
  X3 = col_double()
)
Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character()
)
Parsed with column specification:
cols(
  X1 = col_character()
)
Parsed with column specification:
cols(
  X1 = col_double(),
  X2 = col_double(),
  X3 = col_double()
)
Joining, by = c("X1", "X2")
> 
> ## cDNA/introns separately (with decoys)
> for (m in c("prepref")) {
+   for (v in c("separate", "collapse")) {
+     sces[[paste0("alevin_", m, "_iso", v, "_cdna_introns_decoy")]] <- 
+       do.call(cbind, lapply(samplenames, function(s) {
+         tmp <- read_alevin_with_decoys(
+           spliceddir = file.path(topdir, paste0("quants/", s, "/alevin_", m, "_iso", v, "_cdna_intronsasdecoy/alevin")),
+           unspliceddir = file.path(topdir, paste0("quants/", s, "/alevin_", m, "_iso", v, "_introns_cdnaasdecoy/alevin")),
+           sampleid = s, tx2gene = tx2gene
+         )
+         colnames(tmp) <- paste0(s, "__", colnames(tmp))
+         tmp
+       }))
+     
+     sces[[paste0("alevin_", m, "_iso", v, "_cdna_introns_decoy_gentrome")]] <- 
+       do.call(cbind, lapply(samplenames, function(s) {
+         tmp <- read_alevin_with_decoys(
+           spliceddir = file.path(topdir, paste0("quants/", s, "/alevin_", m, "_iso", v, "_cdna_intronsasdecoy_gentrome/alevin")),
+           unspliceddir = file.path(topdir, paste0("quants/", s, "/alevin_", m, "_iso", v, "_introns_cdnaasdecoy_gentrome/alevin")),
+           sampleid = s, tx2gene = tx2gene
+         )
+         colnames(tmp) <- paste0(s, "__", colnames(tmp))
+         tmp
+       }))
+   }
+ }
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
> 
> ## cDNA/introns quantified jointly
> for (m in c("prepref")) {
+   for (v in c("separate", "collapse")) {
+     sces[[paste0("alevin_", m, "_iso", v, "_cdna_introns")]] <- 
+       do.call(cbind, lapply(samplenames, function(s) {
+         tmp <- read_alevin_cdna_introns(
+           alevindir = file.path(topdir, paste0("quants/", s, "/alevin_", m, "_iso", v, "_cdna_introns/alevin")),
+           sampleid = s, tx2gene = tx2gene
+         )
+         colnames(tmp) <- paste0(s, "__", colnames(tmp))
+         tmp
+       }))
+     
+     sces[[paste0("alevin_", m, "_iso", v, "_cdna_introns_gentrome")]] <- 
+       do.call(cbind, lapply(samplenames, function(s) {
+         tmp <- read_alevin_cdna_introns(
+           alevindir = file.path(topdir, paste0("quants/", s, "/alevin_", m, "_iso", v, "_cdna_introns_gentrome/alevin")),
+           sampleid = s, tx2gene = tx2gene
+         )
+         colnames(tmp) <- paste0(s, "__", colnames(tmp))
+         tmp
+       }))
+     
+     if (v == "separate") {
+       sces[[paste0("alevin_", m, "_iso", v, "_cdna_introns_gentrome_unstranded")]] <- 
+         do.call(cbind, lapply(samplenames, function(s) {
+           tmp <- read_alevin_cdna_introns(
+             alevindir = file.path(topdir, paste0("quants/", s, "/alevin_", m, "_iso", v, "_cdna_introns_gentrome_unstranded/alevin")),
+             sampleid = s, tx2gene = tx2gene
+           )
+           colnames(tmp) <- paste0(s, "__", colnames(tmp))
+           tmp
+         }))
+         
+       
+       for (u in c("_flankL20", "_flankL40")) {
+         sces[[paste0("alevin_", m, "_iso", v, u, "_cdna_introns_gentrome")]] <- 
+           do.call(cbind, lapply(samplenames, function(s) {
+             tmp <- read_alevin_cdna_introns(
+               alevindir = file.path(topdir, paste0("quants/", s, "/alevin_", m, "_iso", v, u, "_cdna_introns_gentrome/alevin")),
+               sampleid = s, tx2gene = tx2gene
+             )
+             colnames(tmp) <- paste0(s, "__", colnames(tmp))
+             tmp
+           }))
+       }
+     }
+     
+   }
+ }
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
> 
> sces$alevin_spliced_unspliced <- 
+   do.call(cbind, lapply(samplenames, function(s) {
+     tmp <- read_alevin_spliced_unspliced(
+       alevindir = file.path(topdir, "quants/", s, "/alevin_spliced_unspliced/alevin"),
+       sampleid = s, tx2gene = tx2gene
+     )
+     colnames(tmp) <- paste0(s, "__", colnames(tmp))
+     tmp
+   }))
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
> sces$alevin_spliced_unspliced_gentrome <- 
+   do.call(cbind, lapply(samplenames, function(s) {
+     tmp <- read_alevin_spliced_unspliced(
+       alevindir = file.path(topdir, "quants/", s, "/alevin_spliced_unspliced_gentrome/alevin"),
+       sampleid = s, tx2gene = tx2gene
+     )
+     colnames(tmp) <- paste0(s, "__", colnames(tmp))
+     tmp
+   }))
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
importing quantifications
reading in alevin gene-level counts across cells with fishpond
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
> 
> sces$alevin_spliced <- 
+   do.call(cbind, lapply(samplenames, function(s) {
+     tmp <- read_alevin_spliced(
+       alevindir = file.path(topdir, "quants/", s, "/alevin_spliced/alevin"),
+       sampleid = s, tx2gene = tx2gene
+     )
+     colnames(tmp) <- paste0(s, "__", colnames(tmp))
+     tmp
+   }))
importing quantifications
reading in alevin gene-level counts across cells with fishpond
found matching transcriptome:
[ GENCODE - Mus musculus - release M21 ]
building TxDb with 'GenomicFeatures' package
Import genomic features from the file as a GRanges object ... trying URL 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M21/gencode.vM21.annotation.gtf.gz'
Content type 'unknown' length 26992642 bytes (25.7 MB)
==================================================
OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
generating gene ranges
generating gene ranges
fetching genome info for GENCODE
importing quantifications
reading in alevin gene-level counts across cells with fishpond
found matching transcriptome:
[ GENCODE - Mus musculus - release M21 ]
loading existing TxDb created: 2020-02-16 19:28:07
Loading required package: GenomicFeatures
Loading required package: AnnotationDbi

Attaching package: 'AnnotationDbi'

The following object is masked from 'package:dplyr':

    select

generating gene ranges
loading existing gene ranges created: 2020-02-16 19:28:48
fetching genome info for GENCODE
Warning message:
In .get_cds_IDX(mcols0$type, mcols0$phase) :
  The "phase" metadata column contains non-NA values for features of type
  stop_codon. This information was ignored.
> sces$alevin_spliced_gentrome <- 
+   do.call(cbind, lapply(samplenames, function(s) {
+     tmp <- read_alevin_spliced(
+       alevindir = file.path(topdir, "quants/", s, "/alevin_spliced_gentrome/alevin"),
+       sampleid = s, tx2gene = tx2gene
+     )
+     colnames(tmp) <- paste0(s, "__", colnames(tmp))
+     tmp
+   }))
importing quantifications
reading in alevin gene-level counts across cells with fishpond
found matching transcriptome:
[ GENCODE - Mus musculus - release M21 ]
loading existing TxDb created: 2020-02-16 19:28:07
generating gene ranges
loading existing gene ranges created: 2020-02-16 19:28:48
fetching genome info for GENCODE
importing quantifications
reading in alevin gene-level counts across cells with fishpond
found matching transcriptome:
[ GENCODE - Mus musculus - release M21 ]
loading existing TxDb created: 2020-02-16 19:28:07
generating gene ranges
loading existing gene ranges created: 2020-02-16 19:28:48
fetching genome info for GENCODE
> 
> 
> for (m in c("prepref")) {
+   for (v in c("separate", "collapse")) {
+     for (k in c("exclude", "include")) {
+       sces[[paste0("kallisto_bustools_", m, "_iso", v, "_", k)]] <- 
+         do.call(cbind, lapply(samplenames, function(s) {
+           tmp <- read_kallisto_bustools(
+             kallistodir = file.path(topdir, paste0("quants/", s, "/kallisto_bustools_", 
+                                                    m, "_iso", v, "_cdna_introns")),
+             splicedname = paste0("spliced.", k),
+             unsplicedname = paste0("unspliced.", k)
+           )
+           colnames(tmp) <- paste0(s, "__", colnames(tmp))
+           tmp
+         }))
+     }
+   }
+ }
> 
> ## ========================================================================= ##
> ## subset to shared cells/genes
> ## ========================================================================= ##
> shared_cells <- as.character(Reduce(intersect, lapply(sces, colnames)))
> sces <- lapply(sces, function(w) w[, shared_cells])
> 
> ## Check that no barcode is quantified in both samples
> if (length(unique(gsub(".*__", "", shared_cells))) != 
+     length(shared_cells)) {
+   stop("Some barcode is quantified in both samples")
+ } else {
+   ## Remove sample indication in barcode
+   sces <- lapply(sces, function(w) {
+     colnames(w) <- gsub(".*__", "", colnames(w))
+     w
+   })
+   shared_cells <- as.character(Reduce(intersect, lapply(sces, colnames)))
+ }
> if (!is.null(cells)) {
+   shared_cells <- intersect(shared_cells, as.character(cells$index))
+ }
> shared_genes <- as.character(Reduce(intersect, lapply(sces, rownames)))
> 
> sces <- lapply(sces, function(w) w[shared_genes, shared_cells])
> 
> if (!is.null(cells)) {
+   cells <- cells[match(shared_cells, cells$index), ] %>%
+     dplyr::rename(cell_index = index)
+   cells$cell_index <- as.character(cells$cell_index)
+   cells$clusters <- as.character(cells$clusters)
+   cells$clusters_enlarged <- as.character(cells$clusters_enlarged)
+   
+   sces <- lapply(sces, function(w) {
+     colData(w) <- cbind(colData(w), DataFrame(cells))
+     w
+   })
+ }
> 
> ## ========================================================================= ##
> ## Add reduced dimension representation + clusters
> ## ========================================================================= ##
> do_dimred <- function(sce) {
+   sce <- scater::logNormCounts(sce)
+   set.seed(1)
+   sce <- scater::runPCA(sce, exprs_values = "logcounts", 
+                         ncomponents = 30,
+                         BSPARAM = BiocSingular::IrlbaParam())
+   sce <- scater::runTSNE(sce, dimred = "PCA", 
+                          ncomponents = 2)
+   sce <- scater::runUMAP(sce, dimred = "PCA", 
+                          ncomponents = 2, min_dist = 0.4)
+   
+   snn.gr <- scran::buildSNNGraph(sce, use.dimred = "PCA")
+   clusters <- igraph::cluster_walktrap(snn.gr)
+   sce$cluster <- factor(clusters$membership)
+   
+   sce
+ }
> 
> ## Calculate logcounts and reduced dimensions
> for (nm in names(sces)) {
+   message(nm)
+   sces[[nm]] <- do_dimred(sces[[nm]])
+ }
starsolo
starsolo_subtr
alevin_prepref_isoseparate_cdna_introns_decoy
alevin_prepref_isoseparate_cdna_introns_decoy_gentrome
alevin_prepref_isocollapse_cdna_introns_decoy
alevin_prepref_isocollapse_cdna_introns_decoy_gentrome
alevin_prepref_isoseparate_cdna_introns
alevin_prepref_isoseparate_cdna_introns_gentrome
alevin_prepref_isoseparate_cdna_introns_gentrome_unstranded
alevin_prepref_isoseparate_flankL20_cdna_introns_gentrome
alevin_prepref_isoseparate_flankL40_cdna_introns_gentrome
alevin_prepref_isocollapse_cdna_introns
alevin_prepref_isocollapse_cdna_introns_gentrome
alevin_spliced_unspliced
alevin_spliced_unspliced_gentrome
alevin_spliced
alevin_spliced_gentrome
kallisto_bustools_prepref_isoseparate_exclude
kallisto_bustools_prepref_isoseparate_include
kallisto_bustools_prepref_isocollapse_exclude
kallisto_bustools_prepref_isocollapse_include
> 
> ## Add common representations to all data sets
> ## From alevin_spliced
> sces <- lapply(sces, function(w) {
+   reducedDim(w, "PCA_alevin_spliced_gentrome") <- reducedDim(sces[["alevin_spliced_gentrome"]], "PCA")
+   reducedDim(w, "TSNE_alevin_spliced_gentrome") <- reducedDim(sces[["alevin_spliced_gentrome"]], "TSNE")
+   reducedDim(w, "UMAP_alevin_spliced_gentrome") <- reducedDim(sces[["alevin_spliced_gentrome"]], "UMAP")
+   w$cluster_alevin_spliced_gentrome <- sces[["alevin_spliced_gentrome"]]$cluster
+   w
+ })
> 
> ## From starsolo
> sces <- lapply(sces, function(w) {
+   reducedDim(w, "PCA_starsolo") <- reducedDim(sces[["starsolo"]], "PCA")
+   reducedDim(w, "TSNE_starsolo") <- reducedDim(sces[["starsolo"]], "TSNE")
+   reducedDim(w, "UMAP_starsolo") <- reducedDim(sces[["starsolo"]], "UMAP")
+   w$cluster_starsolo <- sces[["starsolo"]]$cluster
+   w
+ })
> 
> for (m in c("starsolo")) {
+   message(m)
+   ## Concatenated spliced and unspliced
+   tmp <- SingleCellExperiment(
+     assays = list(counts = rbind(assay(sces[[m]], "spliced"), 
+                                  assay(sces[[m]], "unspliced"))))
+   tmp <- do_dimred(tmp)
+   sces <- lapply(sces, function(w) {
+     reducedDim(w, paste0("PCA_", m, "_concatenated")) <- reducedDim(tmp, "PCA")
+     reducedDim(w, paste0("TSNE_", m, "_concatenated")) <- reducedDim(tmp, "TSNE")
+     reducedDim(w, paste0("UMAP_", m, "_concatenated")) <- reducedDim(tmp, "UMAP")
+     colData(w)[[paste0("cluster_", m, "_concatenated")]] <- tmp$cluster
+     w
+   })
+   
+   ## Summed spliced and unspliced
+   tmp <- SingleCellExperiment(
+     assays = list(counts = assay(sces[[m]], "spliced") +  
+                     assay(sces[[m]], "unspliced")))
+   tmp <- do_dimred(tmp)
+   sces <- lapply(sces, function(w) {
+     reducedDim(w, paste0("PCA_", m, "_summed")) <- reducedDim(tmp, "PCA")
+     reducedDim(w, paste0("TSNE_", m, "_summed")) <- reducedDim(tmp, "TSNE")
+     reducedDim(w, paste0("UMAP_", m, "_summed")) <- reducedDim(tmp, "UMAP")
+     colData(w)[[paste0("cluster_", m, "_summed")]] <- tmp$cluster
+     w
+   })
+   
+   ## Only unspliced
+   tmp <- SingleCellExperiment(
+     assays = list(counts = assay(sces[[m]], "unspliced")))
+   tmp <- do_dimred(tmp)
+   sces <- lapply(sces, function(w) {
+     reducedDim(w, paste0("PCA_", m, "_unspliced")) <- reducedDim(tmp, "PCA")
+     reducedDim(w, paste0("TSNE_", m, "_unspliced")) <- reducedDim(tmp, "TSNE")
+     reducedDim(w, paste0("UMAP_", m, "_unspliced")) <- reducedDim(tmp, "UMAP")
+     colData(w)[[paste0("cluster_", m, "_unspliced")]] <- tmp$cluster
+     w
+   })
+   
+ }
starsolo
> 
> ## ========================================================================= ##
> ## Save
> ## ========================================================================= ##
> for (nm in names(sces)) {
+   metadata(sces[[nm]]) <- list(method = nm, dataset = dataset)
+   saveRDS(sces[[nm]], file = file.path(dirname(outrds), paste0("sce_", nm, ".rds")))
+ }
> write.table(paste0(shared_cells, "-1"), 
+             file = file.path(dirname(outrds), 
+                              paste0("retained_cell_barcodes.csv")),
+             row.names = FALSE, col.names = FALSE, sep = ",", quote = FALSE)
> saveRDS(NULL, file = outrds)
> 
> date()
[1] "Sun Feb 16 20:43:15 2020"
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /tungstenfs/groups/gbioinfo/Appz/easybuild/software/OpenBLAS/0.3.7-GCC-8.3.0/lib/libopenblas_skylakex-r0.3.7.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] GenomicFeatures_1.38.1      AnnotationDbi_1.48.0       
 [3] readr_1.3.1                 scater_1.14.6              
 [5] velocyto.R_0.6              Matrix_1.2-18              
 [7] SingleCellExperiment_1.8.0  SummarizedExperiment_1.16.1
 [9] DelayedArray_0.12.2         matrixStats_0.55.0         
[11] Biobase_2.46.0              GenomicRanges_1.38.0       
[13] GenomeInfoDb_1.22.0         IRanges_2.20.2             
[15] S4Vectors_0.24.3            BiocGenerics_0.32.0        
[17] BUSpaRse_1.0.0              zeallot_0.1.0              
[19] ggplot2_3.2.1               dplyr_0.8.4                
[21] tximeta_1.4.3               BiocSingular_1.2.1         
[23] BiocParallel_1.20.1        

loaded via a namespace (and not attached):
 [1] nlme_3.1-143             ProtGenerics_1.18.0      bitops_1.0-6            
 [4] bit64_0.9-7              progress_1.2.2           httr_1.4.1              
 [7] tools_3.6.1              R6_2.4.1                 irlba_2.3.3             
[10] vipor_0.4.5              uwot_0.1.5               DBI_1.1.0               
[13] lazyeval_0.2.2           mgcv_1.8-31              colorspace_1.4-1        
[16] withr_2.1.2              gridExtra_2.3            tidyselect_1.0.0        
[19] prettyunits_1.1.1        bit_1.1-15.2             curl_4.3                
[22] compiler_3.6.1           BiocNeighbors_1.4.1      rtracklayer_1.46.0      
[25] scales_1.1.0             askpass_1.1              rappdirs_0.3.1          
[28] stringr_1.4.0            digest_0.6.23            Rsamtools_2.2.1         
[31] XVector_0.26.0           pkgconfig_2.0.3          limma_3.42.2            
[34] dbplyr_1.4.2             ensembldb_2.10.2         BSgenome_1.54.0         
[37] rlang_0.4.4              RSQLite_2.2.0            FNN_1.1.3               
[40] DelayedMatrixStats_1.8.0 jsonlite_1.6.1           gtools_3.8.1            
[43] RCurl_1.98-1.1           magrittr_1.5             GenomeInfoDbData_1.2.2  
[46] ggbeeswarm_0.6.0         Rcpp_1.0.3               munsell_0.5.0           
[49] viridis_0.5.1            lifecycle_0.1.0          edgeR_3.28.0            
[52] stringi_1.4.5            MASS_7.3-51.4            zlibbioc_1.32.0         
[55] Rtsne_0.15               BiocFileCache_1.10.2     grid_3.6.1              
[58] blob_1.2.1               dqrng_0.2.1              crayon_1.3.4            
[61] lattice_0.20-38          Biostrings_2.54.0        splines_3.6.1           
[64] hms_0.5.3                locfit_1.5-9.1           fishpond_1.2.0          
[67] pillar_1.4.3             igraph_1.2.4.2           biomaRt_2.42.0          
[70] XML_3.99-0.3             glue_1.3.1               scran_1.14.6            
[73] pcaMethods_1.78.0        data.table_1.12.8        RcppParallel_4.4.4      
[76] vctrs_0.2.2              gtable_0.3.0             openssl_1.4.1           
[79] purrr_0.3.3              tidyr_1.0.2              assertthat_0.2.1        
[82] rsvd_1.0.2               AnnotationFilter_1.10.0  RSpectra_0.16-0         
[85] viridisLite_0.3.0        tibble_2.1.3             beeswarm_0.2.3          
[88] GenomicAlignments_1.22.1 plyranges_1.6.8          memoise_1.1.0           
[91] tximport_1.14.0          cluster_2.1.0            statmod_1.4.33          
> 
> proc.time()
    user   system  elapsed 
1094.863   44.817 1167.108 
