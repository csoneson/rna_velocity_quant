
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in seq_len(length(args))) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages({
+   library(ggplot2)
+   library(cowplot)
+   library(dplyr)
+   library(SummarizedExperiment)
+   library(SingleCellExperiment)
+ })
> 
> methods <- strsplit(methods, ",")[[1]]
> names(methods) <- methods
> 
> print(topdir)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/spermatogenesis_mouse"
> print(plothelperscript)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/scripts/plot_helpers.R"
> print(dataset)
[1] "Spermatogenesis"
> print(methods)
                                                velocyto 
                                              "velocyto" 
           kallisto_bustools_prepref_isocollapse_exclude 
         "kallisto_bustools_prepref_isocollapse_exclude" 
           kallisto_bustools_prepref_isoseparate_exclude 
         "kallisto_bustools_prepref_isoseparate_exclude" 
           kallisto_bustools_prepref_isocollapse_include 
         "kallisto_bustools_prepref_isocollapse_include" 
           kallisto_bustools_prepref_isoseparate_include 
         "kallisto_bustools_prepref_isoseparate_include" 
                                                starsolo 
                                              "starsolo" 
                                          starsolo_subtr 
                                        "starsolo_subtr" 
        alevin_prepref_isocollapse_cdna_introns_gentrome 
      "alevin_prepref_isocollapse_cdna_introns_gentrome" 
        alevin_prepref_isoseparate_cdna_introns_gentrome 
      "alevin_prepref_isoseparate_cdna_introns_gentrome" 
  alevin_prepref_isocollapse_cdna_introns_decoy_gentrome 
"alevin_prepref_isocollapse_cdna_introns_decoy_gentrome" 
  alevin_prepref_isoseparate_cdna_introns_decoy_gentrome 
"alevin_prepref_isoseparate_cdna_introns_decoy_gentrome" 
                       alevin_spliced_unspliced_gentrome 
                     "alevin_spliced_unspliced_gentrome" 
> print(outrds)
[1] "plots/compare_velocity_projections/spermatogenesis_plot_compare_velocity_projections.rds"
> 
> source(plothelperscript)
> methods_short <- shorten_methods(methods)
> 
> ## Read one data set (only to get the UMAP_alevin_spliced representation)
> sce <- readRDS(file.path(topdir, paste0("output/sce/sce_", methods[1], ".rds")))
> 
> ## ------------------------------------------------------------------------- ##
> ## Compare velocity projections with "all" genes to those with only shared 
> ## genes, for each method
> ## ------------------------------------------------------------------------- ##
> plotlist <- lapply(methods, function(m) {
+   sm <- methods_short$method_short[match(m, methods_short$method)]
+   v_all <- read.delim(
+     file.path(topdir, paste0("plots/velocity/anndata_", m, "/anndata_", 
+                              m, "_velocity_UMAP_alevin_spliced_gentrome.csv")), 
+     header = TRUE, as.is = TRUE, sep = ",")
+   v_shared <- read.delim(
+     file.path(topdir, paste0("plots/velocity/anndata_", m, "_shared_genes/anndata_", 
+                              m, "_shared_genes_velocity_UMAP_alevin_spliced_gentrome.csv")), 
+     header = TRUE, as.is = TRUE, sep = ",")
+   
+   tmp <- v_all %>% dplyr::rename(X0_all = X0, X1_all = X1) %>%
+     dplyr::inner_join(v_shared %>% dplyr::rename(X0_shared = X0, X1_shared = X1),
+                       by = "index") %>%
+     dplyr::mutate(X0sum = X0_all + X0_shared,
+                   X1sum = X1_all + X1_shared) %>%
+     dplyr::mutate(lengthOfSum = sqrt(X0sum ^ 2 + X1sum ^ 2),
+                   sumOfLength = sqrt(X0_all ^ 2 + X1_all ^ 2) + sqrt(X0_shared ^ 2 + X1_shared ^ 2)) %>%
+     dplyr::mutate(los_over_sol = lengthOfSum/sumOfLength)
+   
+   stopifnot(all(tmp$index == colnames(sce)))
+   df <- data.frame(reducedDim(sce, "UMAP_alevin_spliced_gentrome"), los_over_sol = tmp$los_over_sol,
+                    stringsAsFactors = FALSE)
+   ggplot(df, aes(x = X1, y = X2, color = los_over_sol)) + 
+     geom_point(size = 0.8, alpha = 0.5) +
+     scale_color_gradientn(colors = viridis::viridis(21), na.value = "grey50", limits = c(0, 1),
+                           name = "Concordance between velocity projections") + 
+     labs(x = "UMAP_alevin_spliced 1", y = "UMAP_alevin_spliced 2",
+          title = sm) + 
+     theme_void()
+ })
> 
> png(gsub("\\.rds", "_all_vs_shared_genes_bymethod.png", outrds), width = 8, height = 12,
+     unit = "in", res = 200)
> print(cowplot::plot_grid(
+   cowplot::plot_grid(plotlist = lapply(plotlist, function(w) w + theme(legend.position = "none")), ncol = 3),
+   cowplot::get_legend(plotlist[[1]] + theme(legend.position = "bottom")),
+   ncol = 1, rel_heights = c(1, 0.05)
+ ))
> dev.off()
null device 
          1 
> 
> ## ------------------------------------------------------------------------- ##
> ## Compare velocity projections across methods, using "all"/shared genes
> ## ------------------------------------------------------------------------- ##
> ## Help function
> summarize_res <- function(res) {
+   ## For each cell, calculate the sum of the individual (method-wise) 
+   ## velocity vector lengths
+   res1 <- res %>% dplyr::group_by(index, method) %>%
+     dplyr::summarize(speed = sqrt(sum(value ^ 2))) %>%
+     dplyr::ungroup() %>%
+     dplyr::group_by(index) %>%
+     dplyr::summarize(sum_speed = sum(speed))
+   
+   ## For each cell, calculate the sum of the velocity vectors across methods, 
+   ## and then the length of that sum
+   res2 <- res %>% dplyr::group_by(index, coord) %>%
+     dplyr::summarize(value = sum(value)) %>%
+     dplyr::ungroup() %>%
+     dplyr::group_by(index) %>%
+     dplyr::summarize(speed_sum = sqrt(sum(value ^ 2)))
+   
+   ## Combine
+   speeds <- res1 %>% dplyr::inner_join(res2, by = "index") %>%
+     dplyr::mutate(speed_ratio = speed_sum/sum_speed)
+   speeds
+ }
> 
> ## ------------------------------------------------------------------------- ##
> ## "All" (individually selected) genes
> ## ------------------------------------------------------------------------- ##
> res <- do.call(dplyr::bind_rows, lapply(methods, function(m) {
+   read.delim(
+     file.path(topdir, paste0("plots/velocity/anndata_", m, "/anndata_", 
+                              m, "_velocity_UMAP_alevin_spliced_gentrome.csv")), 
+     header = TRUE, as.is = TRUE, sep = ",") %>%
+     tidyr::gather(key = "coord", value = "value", X0, X1) %>%
+     dplyr::mutate(method = m)
+ }))
> 
> speeds <- summarize_res(res)
> stopifnot(length(intersect(speeds$index, colnames(sce))) == ncol(sce))
> speeds <- speeds[match(colnames(sce), speeds$index), ]
> stopifnot(all(speeds$index == colnames(sce)))
>   
> df <- data.frame(reducedDim(sce, "UMAP_alevin_spliced_gentrome"), speed_ratio = speeds$speed_ratio,
+                  stringsAsFactors = FALSE)
> g1 <- ggplot(df, aes(x = X1, y = X2, color = speed_ratio)) + 
+   geom_point(alpha = 0.5) +
+   scale_color_gradientn(colors = viridis::viridis(21), na.value = "grey50", limits = c(0, 1),
+                         name = "Concordance between\nvelocity projections") + 
+   labs(x = "UMAP_alevin_spliced 1", y = "UMAP_alevin_spliced 2",
+        title = paste0(dataset, ", individually selected genes")) + 
+   theme_bw() + theme(legend.position = "bottom")
> 
> ## ------------------------------------------------------------------------- ##
> ## Shared genes
> ## ------------------------------------------------------------------------- ##
> res <- do.call(dplyr::bind_rows, lapply(methods, function(m) {
+   read.delim(
+     file.path(topdir, paste0("plots/velocity/anndata_", m, "_shared_genes/anndata_", 
+                              m, "_shared_genes_velocity_UMAP_alevin_spliced_gentrome.csv")), 
+     header = TRUE, as.is = TRUE, sep = ",") %>%
+     tidyr::gather(key = "coord", value = "value", X0, X1) %>%
+     dplyr::mutate(method = m)
+ }))
> 
> speeds <- summarize_res(res)
> stopifnot(length(intersect(speeds$index, colnames(sce))) == ncol(sce))
> speeds <- speeds[match(colnames(sce), speeds$index), ]
> stopifnot(all(speeds$index == colnames(sce)))
> 
> df <- data.frame(reducedDim(sce, "UMAP_alevin_spliced_gentrome"), speed_ratio = speeds$speed_ratio,
+                  stringsAsFactors = FALSE)
> g2 <- ggplot(df, aes(x = X1, y = X2, color = speed_ratio)) + 
+   geom_point(alpha = 0.5) +
+   scale_color_gradientn(colors = viridis::viridis(21), na.value = "grey50", limits = c(0, 1),
+                         name = "Concordance between\nvelocity projections") + 
+   labs(x = "UMAP_alevin_spliced 1", y = "UMAP_alevin_spliced 2",
+        title = paste0(dataset, ", shared genes")) + 
+   theme_bw() + theme(legend.position = "bottom")
> 
> 
> png(gsub("\\.rds", "_across_methods.png", outrds), width = 4.5, height = 8,
+     unit = "in", res = 200)
> print(cowplot::plot_grid(
+   cowplot::plot_grid(
+     g1 + theme(legend.position = "none"), 
+     g2 + theme(legend.position = "none"),
+     ncol = 1, rel_heights = c(1, 1)),
+   cowplot::get_legend(g1), ncol = 1, rel_heights = c(1, 0.2)
+   ))
> dev.off()
null device 
          1 
> 
> 
> saveRDS(NULL, file = outrds)
> date()
[1] "Sat Feb 22 16:08:04 2020"
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /tungstenfs/groups/gbioinfo/Appz/easybuild/software/OpenBLAS/0.3.7-GCC-8.3.0/lib/libopenblas_skylakex-r0.3.7.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] SingleCellExperiment_1.8.0  SummarizedExperiment_1.16.1
 [3] DelayedArray_0.12.2         BiocParallel_1.20.1        
 [5] matrixStats_0.55.0          Biobase_2.46.0             
 [7] GenomicRanges_1.38.0        GenomeInfoDb_1.22.0        
 [9] IRanges_2.20.2              S4Vectors_0.24.3           
[11] BiocGenerics_0.32.0         dplyr_0.8.4                
[13] cowplot_1.0.0               ggplot2_3.2.1              

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.3             pillar_1.4.3           compiler_3.6.1        
 [4] XVector_0.26.0         viridis_0.5.1          tools_3.6.1           
 [7] bitops_1.0-6           zlibbioc_1.32.0        digest_0.6.23         
[10] viridisLite_0.3.0      lifecycle_0.1.0        tibble_2.1.3          
[13] gtable_0.3.0           lattice_0.20-38        pkgconfig_2.0.3       
[16] rlang_0.4.4            Matrix_1.2-18          gridExtra_2.3         
[19] GenomeInfoDbData_1.2.2 stringr_1.4.0          withr_2.1.2           
[22] vctrs_0.2.2            grid_3.6.1             tidyselect_1.0.0      
[25] glue_1.3.1             R6_2.4.1               tidyr_1.0.2           
[28] farver_2.0.3           purrr_0.3.3            magrittr_1.5          
[31] ellipsis_0.3.0         scales_1.1.0           assertthat_0.2.1      
[34] colorspace_1.4-1       labeling_0.3           stringi_1.4.5         
[37] RCurl_1.98-1.1         lazyeval_0.2.2         munsell_0.5.0         
[40] crayon_1.3.4          
> 
> proc.time()
   user  system elapsed 
 17.462   0.916  19.011 
