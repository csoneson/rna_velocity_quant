
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in seq_len(length(args))) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages({
+   library(dplyr)
+   library(ggplot2)
+   library(SummarizedExperiment)
+   library(SingleCellExperiment)
+   library(scater)
+   library(readr)
+   library(UpSetR)
+   library(pheatmap)
+ })
> 
> methods <- strsplit(methods, ",")[[1]]
> names(methods) <- methods
> 
> print(topdir)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/dentate_gyrus_mouse"
> print(plothelperscript)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/scripts/plot_helpers.R"
> print(dataset)
[1] "Dentate_gyrus"
> print(methods)
  kallisto_bustools_prepref_isocollapse_exclude 
"kallisto_bustools_prepref_isocollapse_exclude" 
  kallisto_bustools_prepref_isoseparate_exclude 
"kallisto_bustools_prepref_isoseparate_exclude" 
  kallisto_bustools_prepref_isocollapse_include 
"kallisto_bustools_prepref_isocollapse_include" 
  kallisto_bustools_prepref_isoseparate_include 
"kallisto_bustools_prepref_isoseparate_include" 
        alevin_prepref_isocollapse_cdna_introns 
      "alevin_prepref_isocollapse_cdna_introns" 
        alevin_prepref_isoseparate_cdna_introns 
      "alevin_prepref_isoseparate_cdna_introns" 
  alevin_prepref_isocollapse_cdna_introns_decoy 
"alevin_prepref_isocollapse_cdna_introns_decoy" 
  alevin_prepref_isoseparate_cdna_introns_decoy 
"alevin_prepref_isoseparate_cdna_introns_decoy" 
                       alevin_spliced_unspliced 
                     "alevin_spliced_unspliced" 
                                       starsolo 
                                     "starsolo" 
                                 starsolo_subtr 
                               "starsolo_subtr" 
> print(outrds)
[1] "plots/velocity_confidence/dentate_gyrus_plot_velocity_confidence.rds"
> 
> source(plothelperscript)
> 
> methods_short <- shorten_methods(methods)
> 
> cellinfo <- lapply(methods, function(nm) {
+   readr::read_csv(paste0(topdir, "/plots/velocity/anndata_", nm, "/anndata_", nm, 
+                          "_cell_info.csv")) %>%
+     dplyr::mutate(method = nm)
+ })
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  cell_index = col_character(),
  clusters = col_character(),
  clusters_enlarged = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  cell_index = col_character(),
  clusters = col_character(),
  clusters_enlarged = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  cell_index = col_character(),
  clusters = col_character(),
  clusters_enlarged = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  cell_index = col_character(),
  clusters = col_character(),
  clusters_enlarged = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  cell_index = col_character(),
  clusters = col_character(),
  clusters_enlarged = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  cell_index = col_character(),
  clusters = col_character(),
  clusters_enlarged = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  cell_index = col_character(),
  clusters = col_character(),
  clusters_enlarged = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  cell_index = col_character(),
  clusters = col_character(),
  clusters_enlarged = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  cell_index = col_character(),
  clusters = col_character(),
  clusters_enlarged = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  cell_index = col_character(),
  clusters = col_character(),
  clusters_enlarged = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  cell_index = col_character(),
  clusters = col_character(),
  clusters_enlarged = col_character()
)
See spec(...) for full column specifications.
> geneinfo <- lapply(methods, function(nm) {
+   readr::read_csv(paste0(topdir, "/plots/velocity/anndata_", nm, "/anndata_", nm, 
+                          "_gene_info.csv")) %>%
+     dplyr::mutate(method = nm)
+ })
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
> 
> velocity_confidence <- do.call(dplyr::bind_rows, lapply(cellinfo, function(w) {
+   w %>% dplyr::select(index, method, contains("clusters"), velocity_confidence, 
+                       velocity_confidence_transition, velocity_self_transition, 
+                       velocity_length, velocity_pseudotime, latent_time)
+ })) %>%
+   dplyr::left_join(methods_short, by = "method")
> if ("clusters" %in% colnames(velocity_confidence) && !is.null(cluster_levels[[dataset]])) {
+   velocity_confidence$clusters <- factor(
+     as.character(velocity_confidence$clusters), 
+     levels = cluster_levels[[dataset]]
+   )
+ }
> 
> velocity_genes <- do.call(dplyr::bind_rows, lapply(geneinfo, function(w) {
+   w %>% dplyr::select(index, method, 
+                       velocity_score, fit_alpha, fit_beta, fit_gamma, 
+                       fit_likelihood)
+ })) %>%
+   dplyr::left_join(methods_short, by = "method")
> 
> pdf(gsub("rds$", "pdf", outrds), width = 10, height = 10)
> 
> if ("clusters" %in% colnames(velocity_confidence)) {
+   ggplot(velocity_confidence, aes(x = clusters, y = latent_time)) + 
+     geom_violin(aes(fill = clusters), alpha = 0.25) + theme_bw() + 
+     facet_wrap(~ method) + 
+     theme(legend.position = "none",
+           axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) + 
+     labs(title = "Latent time vs cluster")
+ }
> 
> ggplot(velocity_confidence, aes(x = method_short, y = velocity_confidence)) + 
+   geom_boxplot(aes(fill = mtype), alpha = 0.25) + 
+   theme_bw() + 
+   scale_fill_manual(values = base_method_colors, name = "") + 
+   theme(legend.position = "none",
+         axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
+   labs(title = "Velocity confidence, per cell",
+        subtitle = paste0("The velocity confidence checks whether the velocities ", 
+                          "agree with the neighboring velocities, \ni.e. ", 
+                          "a kind of smoothness score"))
> 
> ggplot(velocity_confidence, aes(x = method_short, y = velocity_length)) + 
+   geom_boxplot(aes(fill = mtype), alpha = 0.25) + 
+   theme_bw() + 
+   scale_y_log10() + 
+   scale_fill_manual(values = base_method_colors, name = "") + 
+   theme(legend.position = "none",
+         axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
+   labs(title = "Velocity length, per cell",
+        subtitle = "")
> 
> ggplot(velocity_confidence, aes(x = method_short, y = velocity_confidence_transition)) + 
+   geom_boxplot(aes(fill = mtype), alpha = 0.25) + 
+   theme_bw() + 
+   scale_fill_manual(values = base_method_colors, name = "") + 
+   theme(legend.position = "none",
+         axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
+   labs(title = "Velocity confidence (transition), per cell",
+        subtitle = paste0("The velocity transition confidence checks whether ", 
+                          "the embedded velocities obtained from the \ntransition ", 
+                          "probabilities truly reflect the velocities ", 
+                          "in high dimensional space."))
> 
> ggplot(velocity_confidence, aes(x = method_short, y = velocity_self_transition)) + 
+   geom_boxplot(aes(fill = mtype), alpha = 0.25) + 
+   theme_bw() + 
+   scale_fill_manual(values = base_method_colors, name = "") + 
+   theme(legend.position = "none",
+         axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
+   labs(title = "Velocity self-transition, per cell",
+        subtitle = paste0(""))
> 
> if ("clusters" %in% colnames(velocity_confidence)) {
+   print(
+     ggplot(velocity_confidence, aes(x = method_short, y = velocity_self_transition)) + 
+       geom_boxplot(aes(fill = mtype), alpha = 0.25) + 
+       theme_bw() + 
+       facet_wrap(~ clusters) + 
+       scale_fill_manual(values = base_method_colors, name = "") + 
+       theme(legend.position = "none",
+             axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
+       labs(title = "Velocity self-transition, per cell",
+            x = "",
+            y = "Self-transition probability"))
+   
+   print(
+     ggplot(velocity_confidence, aes(x = clusters, y = velocity_self_transition)) + 
+       geom_boxplot(aes(fill = mtype), alpha = 0.25) + 
+       theme_bw() + 
+       facet_wrap(~ method_short) + 
+       scale_fill_manual(values = base_method_colors, name = "") + 
+       theme(legend.position = "none",
+             axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
+       labs(title = "Velocity self-transition, per cell",
+            x = "",
+            y = "Self-transition probability"))
+ }
> 
> ggplot(velocity_genes, aes(x = method_short, y = velocity_score)) + 
+   geom_boxplot(aes(fill = mtype), alpha = 0.25) + 
+   scale_y_sqrt() + 
+   theme_bw() + 
+   scale_fill_manual(values = base_method_colors, name = "") + 
+   theme(legend.position = "none",
+         axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
+   labs(title = "Velocity score, per gene",
+        subtitle = paste0(""))
> 
> ggplot(velocity_genes, aes(x = method_short, y = fit_likelihood)) + 
+   geom_boxplot(aes(fill = mtype), alpha = 0.25, scale = "width") + 
+   theme_bw() + 
+   scale_fill_manual(values = base_method_colors, name = "") + 
+   theme(legend.position = "none",
+         axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
+   labs(title = "Fit likelihood, per gene",
+        subtitle = paste0(""))
Warning: Ignoring unknown parameters: scale
Warning message:
Removed 82 rows containing non-finite values (stat_boxplot). 
> 
> dev.off()
null device 
          1 
> 
> saveRDS(list(cell_vel = velocity_confidence %>% dplyr::mutate(dataset = dataset),
+              gene_vel = velocity_genes %>% dplyr::mutate(dataset = dataset)), 
+         file = outrds)
> date()
[1] "Sat Jan 25 13:22:33 2020"
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /tungstenfs/groups/gbioinfo/Appz/easybuild/software/OpenBLAS/0.3.7-GCC-8.3.0/lib/libopenblas_skylakex-r0.3.7.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] pheatmap_1.0.12             UpSetR_1.4.0               
 [3] readr_1.3.1                 scater_1.14.6              
 [5] SingleCellExperiment_1.8.0  SummarizedExperiment_1.16.1
 [7] DelayedArray_0.12.2         BiocParallel_1.20.1        
 [9] matrixStats_0.55.0          Biobase_2.46.0             
[11] GenomicRanges_1.38.0        GenomeInfoDb_1.22.0        
[13] IRanges_2.20.1              S4Vectors_0.24.1           
[15] BiocGenerics_0.32.0         ggplot2_3.2.1              
[17] dplyr_0.8.3                

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.3               rsvd_1.0.2               lattice_0.20-38         
 [4] assertthat_0.2.1         zeallot_0.1.0            R6_2.4.1                
 [7] plyr_1.8.5               backports_1.1.5          pillar_1.4.3            
[10] zlibbioc_1.32.0          rlang_0.4.2              lazyeval_0.2.2          
[13] irlba_2.3.3              Matrix_1.2-18            BiocNeighbors_1.4.1     
[16] labeling_0.3             stringr_1.4.0            RCurl_1.95-4.12         
[19] munsell_0.5.0            compiler_3.6.1           vipor_0.4.5             
[22] BiocSingular_1.2.1       pkgconfig_2.0.3          ggbeeswarm_0.6.0        
[25] tidyselect_0.2.5         tibble_2.1.3             gridExtra_2.3           
[28] GenomeInfoDbData_1.2.2   viridisLite_0.3.0        crayon_1.3.4            
[31] withr_2.1.2              bitops_1.0-6             grid_3.6.1              
[34] gtable_0.3.0             lifecycle_0.1.0          magrittr_1.5            
[37] scales_1.1.0             stringi_1.4.5            farver_2.0.1            
[40] XVector_0.26.0           viridis_0.5.1            DelayedMatrixStats_1.8.0
[43] vctrs_0.2.1              RColorBrewer_1.1-2       tools_3.6.1             
[46] glue_1.3.1               beeswarm_0.2.3           purrr_0.3.3             
[49] hms_0.5.3                colorspace_1.4-1        
> 
> proc.time()
   user  system elapsed 
 14.971   1.126  16.637 
