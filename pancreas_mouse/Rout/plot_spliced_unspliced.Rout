
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in seq_len(length(args))) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages({
+   library(tximeta)
+   library(dplyr)
+   library(ggplot2)
+   library(SummarizedExperiment)
+   library(SingleCellExperiment)
+   library(scater)
+   library(cowplot)
+   library(pheatmap)
+   library(ggrepel)
+ })
> 
> methods <- strsplit(methods, ",")[[1]]
> names(methods) <- methods
> 
> print(topdir)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/pancreas_mouse"
> print(gtf)
[1] "/tungstenfs/groups/gbioinfo/DB/GENCODE/Mouse/release_M21/gencode.vM21.annotation.gtf"
> print(tx2gene)
[1] "/tungstenfs/groups/gbioinfo/DB/GENCODE/Mouse/release_M21/tx2gene/gencode.vM21.annotation.tx2gene_full.rds"
> print(methods)
                                       velocyto 
                                     "velocyto" 
  kallisto_bustools_prepref_isocollapse_exclude 
"kallisto_bustools_prepref_isocollapse_exclude" 
  kallisto_bustools_prepref_isoseparate_exclude 
"kallisto_bustools_prepref_isoseparate_exclude" 
  kallisto_bustools_prepref_isocollapse_include 
"kallisto_bustools_prepref_isocollapse_include" 
  kallisto_bustools_prepref_isoseparate_include 
"kallisto_bustools_prepref_isoseparate_include" 
        alevin_prepref_isocollapse_cdna_introns 
      "alevin_prepref_isocollapse_cdna_introns" 
        alevin_prepref_isoseparate_cdna_introns 
      "alevin_prepref_isoseparate_cdna_introns" 
  alevin_prepref_isocollapse_cdna_introns_decoy 
"alevin_prepref_isocollapse_cdna_introns_decoy" 
  alevin_prepref_isoseparate_cdna_introns_decoy 
"alevin_prepref_isoseparate_cdna_introns_decoy" 
                       alevin_spliced_unspliced 
                     "alevin_spliced_unspliced" 
                                       starsolo 
                                     "starsolo" 
> print(outrds)
[1] "plots/misc/plot_spliced_unspliced.rds"
> 
> sces <- lapply(methods, function(nm) {
+   readRDS(file.path(topdir, paste0("output/sce/sce_", nm, ".rds")))
+ })
> for (nm in names(sces)) {
+   metadata(sces[[nm]]) <- list(method = nm)
+ }
> 
> gtf <- rtracklayer::import(gtf)
> tx2gene <- readRDS(tx2gene)
> 
> methods_short <- data.frame(method = methods, 
+                             stringsAsFactors = FALSE) %>%
+   dplyr::mutate(method_short = 
+                   gsub("ude", "", 
+                        gsub("kallisto_bustools", "kallisto|bus", 
+                             gsub("collapse", "coll", 
+                                  gsub("separate", "sep",
+                                       gsub("iso", "", 
+                                            gsub("prepref_", "",
+                                                 gsub("_cdna_introns", "", method)))))))) %>%
+   dplyr::mutate(
+     mtype = stringr::str_extract(
+       method_short, "alevin|kallisto\\|bus|starsolo|velocyto"
+     ),
+     rtype = stringr::str_extract(
+       method, "separate|collapse"
+     )
+   ) %>%
+   dplyr::mutate(rtype = replace(rtype, is.na(rtype), "N/A")) %>%
+   dplyr::mutate(rtype = factor(rtype, levels = c("collapse", "separate", "N/A")))
> 
> 
> ## ------------------------------------------------------------------------- ##
> ## Overall similarity (RMSE of count matrices) 
> ## ------------------------------------------------------------------------- ##
> rmse <- do.call(dplyr::bind_rows, lapply(names(sces), function(s1) {
+   do.call(dplyr::bind_rows, lapply(names(sces), function(s2) {
+     data.frame(m1 = s1, m2 = s2, 
+                RMSEspliced = sqrt(mean((assay(sces[[s1]], "spliced") - 
+                                           assay(sces[[s2]], "spliced"))^2)),
+                RMSEunspliced = sqrt(mean((assay(sces[[s1]], "unspliced") - 
+                                             assay(sces[[s2]], "unspliced"))^2)),
+                stringsAsFactors = FALSE)
+   }))
+ }))
> rmses <- rmse %>% dplyr::select(m1, m2, RMSEspliced) %>% 
+   tidyr::spread(key = m2, value = RMSEspliced) %>%
+   as.data.frame() %>%
+   tibble::column_to_rownames("m1") %>%
+   as.matrix()
> rmseu <- rmse %>% dplyr::select(m1, m2, RMSEunspliced) %>% 
+   tidyr::spread(key = m2, value = RMSEunspliced) %>%
+   as.data.frame() %>%
+   tibble::column_to_rownames("m1") %>%
+   as.matrix()
> 
> ## MDS
> cmdspliced <- as.data.frame(cmdscale(rmses, k = 2)) %>%
+   tibble::rownames_to_column("method") %>%
+   dplyr::left_join(methods_short, by = "method")
> 
> cmdunspliced <- as.data.frame(cmdscale(rmseu, k = 2)) %>%
+   tibble::rownames_to_column("method") %>%
+   dplyr::left_join(methods_short, by = "method")
> 
> plset <- list(
+   aes(x = V1, y = V2, shape = rtype, label = method_short),
+   geom_point(aes(color = mtype), size = 7, alpha = 0.7),
+   geom_label_repel(size = 3),
+   theme_minimal(),
+   scale_color_manual(values = c(alevin = "#999999", `kallisto|bus` = "#009E73",
+                                 starsolo = "#0072B2", velocyto = "#CC79A7"), name = ""),
+   scale_shape_discrete(name = ""),
+   labs(x = "MDS1", y = "MDS2")
+ )
> pdf(gsub("\\.rds$", "_mds_spliced_unspliced.pdf", outrds), width = 10, height = 6)
> cowplot::plot_grid(
+   cowplot::plot_grid(
+     ggplot(cmdspliced) + 
+       plset + ggtitle("MDS, RMSE (spliced)") + 
+       theme(legend.position = "none"),
+     ggplot(cmdunspliced) + 
+       plset + ggtitle("MDS, RMSE (unspliced)") + 
+       theme(legend.position = "none"),
+     nrow = 1, labels = c("A", "B"), rel_widths = c(1, 1)
+   ),
+   cowplot::get_legend(ggplot(cmdspliced) + 
+                         plset + theme(legend.position = "bottom")),
+   ncol = 1, labels = "", rel_heights = c(1, 0.1)
+ )
> dev.off()
null device 
          1 
> 
> ## ------------------------------------------------------------------------- ##
> ## Total number of assigned reads
> ## ------------------------------------------------------------------------- ##
> sumdf_bygene <- do.call(dplyr::bind_rows, lapply(sces, function(w) {
+   data.frame(gene = rownames(w),
+              method = metadata(w)$method, 
+              spliced = rowSums(assay(w, "spliced")),
+              unspliced = rowSums(assay(w, "unspliced")),
+              total = rowSums(assay(w, "unspliced")) + rowSums(assay(w, "spliced")),
+              frac_unspliced = rowSums(assay(w, "unspliced"))/(rowSums(assay(w, "unspliced")) + rowSums(assay(w, "spliced"))),
+              stringsAsFactors = FALSE
+   )
+ }))
> 
> ## Add info about uniqueness
> uniq_separate <- read.delim(
+   file.path(topdir, "reference/prepref_isoseparate_uniqueness.txt"),
+   header = TRUE, as.is = TRUE)
> uniq_collapse <- read.delim(
+   file.path(topdir, "reference/prepref_isocollapse_uniqueness.txt"),
+   header = TRUE, as.is = TRUE)
> 
> uniq <- dplyr::bind_rows(
+   uniq_separate %>% 
+     dplyr::mutate(ctype = c("exonic", "intronic")[grepl("I\\.", gene) + 1]) %>%
+     dplyr::mutate(gene = gsub("I\\.", "", gene)) %>%
+     dplyr::mutate(frac_unique = unique/total) %>%
+     dplyr::select(gene, ctype, frac_unique) %>%
+     dplyr::mutate(atype = "separate"),
+   uniq_collapse %>% 
+     dplyr::mutate(ctype = c("exonic", "intronic")[grepl("I\\.", gene) + 1]) %>%
+     dplyr::mutate(gene = gsub("I\\.", "", gene)) %>%
+     dplyr::mutate(frac_unique = unique/total) %>%
+     dplyr::select(gene, ctype, frac_unique) %>%
+     dplyr::mutate(atype = "collapse")
+ ) %>%
+   dplyr::mutate(frac_unique_bin = Hmisc::cut2(frac_unique, 
+                                               cuts = c(0, 0.001, 0.5, 0.999, 1))) %>%
+   dplyr::mutate(gene = tx2gene$gene_name[match(gene, tx2gene$gene_id)]) %>%
+   dplyr::filter(gene %in% sumdf_bygene$gene)
> 
> pdf(gsub("\\.rds$", "_uniqueness.pdf", outrds), width = 8, height = 5)
> ggplot(uniq %>% dplyr::select(-frac_unique_bin) %>% dplyr::group_by(atype) %>% 
+          tidyr::spread(key = "ctype", value = "frac_unique"),
+        aes(x = exonic, y = intronic)) + 
+   geom_abline(slope = 1, intercept = 0) + 
+   geom_point(alpha = 0.25) + 
+   facet_wrap(~ atype) + 
+   theme_bw() + 
+   labs(x = "Fraction unique k-mers, exonic features",
+        y = "Fraction unique k-mers, intronic features",
+        title = "Fraction unique k-mers")
Warning message:
Removed 42546 rows containing missing values (geom_point). 
> 
> ggplot(uniq %>% dplyr::select(-frac_unique_bin) %>% dplyr::group_by(ctype) %>% 
+          tidyr::spread(key = "atype", value = "frac_unique"),
+        aes(x = separate, y = collapse)) + 
+   geom_abline(slope = 1, intercept = 0) + 
+   geom_point(alpha = 0.25) + 
+   facet_wrap(~ ctype) + 
+   theme_bw() + 
+   labs(x = "Fraction unique k-mers, separate",
+        y = "Fraction unique k-mers, collapse",
+        title = "Fraction unique k-mers")
Warning message:
Removed 267 rows containing missing values (geom_point). 
> 
> ggplot(uniq %>% dplyr::select(-frac_unique_bin), aes(x = frac_unique)) + 
+   geom_histogram(bins = 100) + 
+   facet_grid(atype ~ ctype) + 
+   theme_bw() + 
+   labs(x = "Fraction unique k-mers",
+        y = "count",
+        title = "Fraction unique k-mers")
Warning message:
Removed 50 rows containing non-finite values (stat_bin). 
> dev.off()
null device 
          1 
> 
> pdf(gsub("\\.rds$", "_total_count.pdf", outrds), width = 7, height = 10)
> for (ct in c("exonic", "intronic")) {
+   for (at in c("collapse", "separate")) {
+     print(ggplot(dplyr::bind_rows(
+       sumdf_bygene %>% 
+         dplyr::left_join(uniq %>% dplyr::filter(ctype == ct & 
+                                                   atype == at)) %>% 
+         dplyr::mutate(frac_unique_bin = as.character(frac_unique_bin)) %>% 
+         dplyr::group_by(method, frac_unique_bin) %>% 
+         dplyr::summarize(spliced = sum(spliced), 
+                          unspliced = sum(unspliced), 
+                          total = sum(total)) %>% 
+         tidyr::gather(key = "ctype", value = "count", spliced, unspliced, total) %>%
+         dplyr::mutate(ctype = factor(ctype, 
+                                      levels = c("total", "spliced", "unspliced"))) %>%
+         dplyr::left_join(methods_short, by = "method"), 
+       sumdf_bygene %>% group_by(method) %>% 
+         dplyr::summarize(spliced = sum(spliced), 
+                          unspliced = sum(unspliced), 
+                          total = sum(total)) %>% 
+         tidyr::gather(key = "ctype", value = "count", spliced, unspliced, total) %>%
+         dplyr::mutate(frac_unique_bin = "overall") %>%
+         dplyr::mutate(ctype = factor(ctype, 
+                                      levels = c("total", "spliced", "unspliced"))) %>%
+         dplyr::left_join(methods_short, by = "method")
+     ) %>%
+       dplyr::mutate(frac_unique_bin = relevel(factor(frac_unique_bin), ref = "overall")),
+     aes(x = method_short, y = count, fill = mtype)) + 
+       geom_bar(stat = "identity") + 
+       facet_grid(frac_unique_bin ~ ctype, scale = "free_y") + 
+       theme_bw() + 
+       scale_fill_manual(values = c(alevin = "#999999", `kallisto|bus` = "#009E73",
+                                    starsolo = "#0072B2", velocyto = "#CC79A7"), name = "") + 
+       theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
+             legend.position = "none") + 
+       ggtitle(paste0("Total count, stratified by ", ct, " uniqueness (", at, ")")))
+   }
+ }
Joining, by = "gene"
Joining, by = "gene"
Joining, by = "gene"
Joining, by = "gene"
> dev.off()
null device 
          1 
> 
> ## ------------------------------------------------------------------------- ##
> ## Velocity
> ## ------------------------------------------------------------------------- ##
> ## Read genes used for velocity calculations (2,000 per method)
> geneinfo <- lapply(methods, function(nm) {
+   readr::read_csv(paste0(topdir, "/plots/velocity/anndata_", nm, "/anndata_", nm, 
+                          "_gene_info.csv")) %>%
+     dplyr::mutate(method = nm)
+ })
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
> velocitygenes_freq <- table(unlist(lapply(geneinfo, function(w) w$index)))
> velocitygenes <- 
+   as.character(Reduce(union, lapply(geneinfo, function(w) w$index)))
> sumdf_bygene$scvelo_selected <- sumdf_bygene$gene %in% velocitygenes
> sumdf_bygene$scvelo_selected_nbr <- as.numeric(velocitygenes_freq[sumdf_bygene$gene])
> sumdf_bygene$scvelo_selected_nbr[is.na(sumdf_bygene$scvelo_selected_nbr)] <- 0
> 
> ## Summarize across methods
> sumdf_bygene_acrossmethods <- sumdf_bygene %>%
+   dplyr::group_by(gene, scvelo_selected, scvelo_selected_nbr) %>%
+   dplyr::summarize(sd_frac_unspliced = sd(frac_unspliced))
> 
> ## Plot ----
> sumdf_bygene_acrossmethods_scvelosel <- sumdf_bygene_acrossmethods %>% dplyr::filter(scvelo_selected)
> qtl <- quantile(sumdf_bygene_acrossmethods_scvelosel$sd_frac_unspliced, 0.9, na.rm = TRUE)
> ggplot(sumdf_bygene_acrossmethods_scvelosel, 
+        aes(x = sd_frac_unspliced)) + 
+   geom_histogram(bins = 100, fill = "lightgrey") + 
+   geom_vline(xintercept = qtl) + 
+   theme_bw() + 
+   labs(x = "Standard deviation of fraction UMIs in unspliced targets",
+        y = "Number of genes",
+        title = "Variability of the unspliced fractions across quantifications, by gene",
+        subtitle = "Only genes selected by scVelo for at least one quantification") 
Warning message:
Removed 42 rows containing non-finite values (stat_bin). 
> 
> ## Retain top 10% ---- 
> genes_to_keep <- sumdf_bygene_acrossmethods_scvelosel %>%
+   dplyr::filter(sd_frac_unspliced > qtl) %>%
+   dplyr::pull(gene)
> 
> ## Cluster the selected genes based on their unspliced fraction pattern across methods ---- 
> clstdata <- sumdf_bygene %>% dplyr::filter(gene %in% genes_to_keep) %>%
+   dplyr::select(gene, method, frac_unspliced) %>%
+   dplyr::left_join(methods_short) %>% 
+   dplyr::select(gene, method_short, frac_unspliced) %>%
+   tidyr::spread(key = "method_short", value = "frac_unspliced") %>%
+   as.data.frame() %>%
+   tibble::column_to_rownames("gene")
Joining, by = "method"
> clstannot <- sumdf_bygene %>% dplyr::filter(gene %in% genes_to_keep) %>%
+   dplyr::select(gene, method, total) %>%
+   dplyr::left_join(methods_short) %>% 
+   dplyr::select(gene, method_short, total) %>%
+   tidyr::spread(key = "method_short", value = "total") %>%
+   dplyr::left_join(
+     uniq %>% dplyr::select(gene, ctype, atype, frac_unique) %>%
+       tidyr::unite(col = "catype", ctype, atype, sep = ".") %>%
+       dplyr::mutate(catype = paste0("fracunique.", catype)) %>% 
+       tidyr::spread(key = "catype", value = "frac_unique") 
+   ) %>% 
+   as.data.frame() %>%
+   tibble::column_to_rownames("gene")
Joining, by = "method"
Joining, by = "gene"
> 
> hcl <- hclust(d = as.dist(sqrt(2 - 2*cor(t(clstdata)))))
> clusters <- cutree(hcl, k = 10)
> 
> pdf(gsub("\\.rds$", "_fracunspliced_clustering.pdf", outrds), 
+     width = 10, height = 35)
> print(pheatmap::pheatmap(
+   clstdata, cluster_rows = hcl, cutree_rows = 10, 
+   scale = "none", fontsize_row = 4, 
+   annotation_row = clstannot[match(rownames(clstdata), rownames(clstannot)), 
+                              grep("fracunique", colnames(clstannot))]))
> dev.off()
pdf 
  3 
> 
> for (i in unique(clusters)) {
+   gn <- names(clusters[clusters == i])
+   if (length(gn) > 2) {
+     pdf(gsub("\\.rds$", paste0("_fracunspliced_clustering_cluster", i, ".pdf"), outrds),
+         width = 8, height = 5 + length(gn) * 0.07)
+     print(pheatmap::pheatmap(
+       clstdata[gn, ], scale = "none",
+       fontsize_row = 5,
+       main = paste0("cluster ", i),
+       annotation_row = clstannot[match(gn, rownames(clstannot)), 
+                                  grep("fracunique", colnames(clstannot))]))
+     dev.off()
+   }
+ }
> 
> 
> saveRDS(NULL, file = outrds)
> 
> date()
[1] "Fri Dec 13 11:45:12 2019"
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /tungstenfs/groups/gbioinfo/Appz/easybuild/software/OpenBLAS/0.3.7-GCC-8.3.0/lib/libopenblas_skylakex-r0.3.7.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] ggrepel_0.8.1               pheatmap_1.0.12            
 [3] cowplot_1.0.0               scater_1.14.4              
 [5] SingleCellExperiment_1.8.0  SummarizedExperiment_1.16.0
 [7] DelayedArray_0.12.0         BiocParallel_1.20.0        
 [9] matrixStats_0.55.0          Biobase_2.46.0             
[11] GenomicRanges_1.38.0        GenomeInfoDb_1.22.0        
[13] IRanges_2.20.1              S4Vectors_0.24.0           
[15] BiocGenerics_0.32.0         ggplot2_3.2.1              
[17] dplyr_0.8.3                 tximeta_1.4.2              

loaded via a namespace (and not attached):
  [1] ggbeeswarm_0.6.0         colorspace_1.4-1         ellipsis_0.3.0          
  [4] htmlTable_1.13.2         XVector_0.26.0           base64enc_0.1-3         
  [7] BiocNeighbors_1.4.1      rstudioapi_0.10          farver_2.0.1            
 [10] bit64_0.9-7              AnnotationDbi_1.48.0     splines_3.6.1           
 [13] tximport_1.14.0          knitr_1.26               zeallot_0.1.0           
 [16] Formula_1.2-3            jsonlite_1.6             Rsamtools_2.2.1         
 [19] cluster_2.1.0            dbplyr_1.4.2             readr_1.3.1             
 [22] compiler_3.6.1           httr_1.4.1               backports_1.1.5         
 [25] assertthat_0.2.1         Matrix_1.2-17            lazyeval_0.2.2          
 [28] BiocSingular_1.2.0       acepack_1.4.1            htmltools_0.4.0         
 [31] prettyunits_1.0.2        tools_3.6.1              rsvd_1.0.2              
 [34] gtable_0.3.0             glue_1.3.1               GenomeInfoDbData_1.2.2  
 [37] reshape2_1.4.3           rappdirs_0.3.1           Rcpp_1.0.3              
 [40] vctrs_0.2.0              Biostrings_2.54.0        rtracklayer_1.46.0      
 [43] DelayedMatrixStats_1.8.0 xfun_0.11                stringr_1.4.0           
 [46] lifecycle_0.1.0          irlba_2.3.3              ensembldb_2.10.2        
 [49] XML_3.98-1.20            zlibbioc_1.32.0          scales_1.1.0            
 [52] hms_0.5.2                ProtGenerics_1.18.0      AnnotationFilter_1.10.0 
 [55] RColorBrewer_1.1-2       curl_4.2                 memoise_1.1.0           
 [58] gridExtra_2.3            biomaRt_2.42.0           rpart_4.1-15            
 [61] latticeExtra_0.6-28      stringi_1.4.3            RSQLite_2.1.2           
 [64] checkmate_1.9.4          GenomicFeatures_1.38.0   rlang_0.4.2             
 [67] pkgconfig_2.0.3          bitops_1.0-6             lattice_0.20-38         
 [70] purrr_0.3.3              GenomicAlignments_1.22.1 htmlwidgets_1.5.1       
 [73] labeling_0.3             bit_1.1-14               tidyselect_0.2.5        
 [76] plyr_1.8.4               magrittr_1.5             R6_2.4.1                
 [79] Hmisc_4.3-0              DBI_1.0.0                pillar_1.4.2            
 [82] foreign_0.8-72           withr_2.1.2              survival_3.1-7          
 [85] RCurl_1.95-4.12          nnet_7.3-12              tibble_2.1.3            
 [88] crayon_1.3.4             BiocFileCache_1.10.2     viridis_0.5.1           
 [91] progress_1.2.2           grid_3.6.1               data.table_1.12.6       
 [94] blob_1.2.0               digest_0.6.23            tidyr_1.0.0             
 [97] openssl_1.4.1            munsell_0.5.0            beeswarm_0.2.3          
[100] viridisLite_0.3.0        vipor_0.4.5              askpass_1.1             
> 
> proc.time()
   user  system elapsed 
343.079  74.858 421.571 
