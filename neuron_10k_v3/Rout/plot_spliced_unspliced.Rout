
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in seq_len(length(args))) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages({
+   library(tximeta)
+   library(dplyr)
+   library(ggplot2)
+   library(SummarizedExperiment)
+   library(SingleCellExperiment)
+   library(scater)
+   library(cowplot)
+   library(pheatmap)
+ })
> 
> methods <- strsplit(methods, ",")[[1]]
> names(methods) <- methods
> 
> print(topdir)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/neuron_10k_v3"
> print(gtf)
[1] "/tungstenfs/groups/gbioinfo/DB/GENCODE/Mouse/release_M21/gencode.vM21.annotation.gtf"
> print(methods)
                                       velocyto 
                                     "velocyto" 
  kallisto_bustools_prepref_isocollapse_exclude 
"kallisto_bustools_prepref_isocollapse_exclude" 
  kallisto_bustools_prepref_isoseparate_exclude 
"kallisto_bustools_prepref_isoseparate_exclude" 
  kallisto_bustools_prepref_isocollapse_include 
"kallisto_bustools_prepref_isocollapse_include" 
  kallisto_bustools_prepref_isoseparate_include 
"kallisto_bustools_prepref_isoseparate_include" 
        alevin_prepref_isocollapse_cdna_introns 
      "alevin_prepref_isocollapse_cdna_introns" 
        alevin_prepref_isoseparate_cdna_introns 
      "alevin_prepref_isoseparate_cdna_introns" 
  alevin_prepref_isocollapse_cdna_introns_decoy 
"alevin_prepref_isocollapse_cdna_introns_decoy" 
  alevin_prepref_isoseparate_cdna_introns_decoy 
"alevin_prepref_isoseparate_cdna_introns_decoy" 
                       alevin_spliced_unspliced 
                     "alevin_spliced_unspliced" 
> print(outrds)
[1] "plots/misc/plot_spliced_unspliced.rds"
> 
> sces <- lapply(methods, function(nm) {
+   readRDS(file.path(topdir, paste0("output/sce/sce_", nm, ".rds")))
+ })
> for (nm in names(sces)) {
+   metadata(sces[[nm]]) <- list(dataset = nm)
+ }
> alevin_spliced <- readRDS(file.path(topdir, "output/sce/sce_alevin_spliced.rds"))
> metadata(alevin_spliced) <- list(dataset = "alevin_spliced")
> 
> gtf <- rtracklayer::import(gtf)
> 
> ## ========================================================================= ##
> ## Plot
> ## ========================================================================= ##
> pdf(gsub("rds", "pdf", outrds), width = 11, height = 11)
> 
> ## Overall similarity (RMSE of count matrix)
> rmse <- do.call(dplyr::bind_rows, lapply(names(sces), function(s1) {
+   do.call(dplyr::bind_rows, lapply(names(sces), function(s2) {
+     data.frame(m1 = s1, m2 = s2, 
+                RMSEspliced = sqrt(mean((assay(sces[[s1]], "spliced") - 
+                                           assay(sces[[s2]], "spliced"))^2)),
+                RMSEunspliced = sqrt(mean((assay(sces[[s1]], "unspliced") - 
+                                             assay(sces[[s2]], "unspliced"))^2)),
+                stringsAsFactors = FALSE)
+   }))
+ }))
> rmsem <- rmse %>% dplyr::select(m1, m2, RMSEspliced) %>% 
+   tidyr::spread(key = m2, value = RMSEspliced) %>%
+   as.data.frame() %>%
+   tibble::column_to_rownames("m1") %>%
+   as.matrix()
> pheatmap::pheatmap(rmsem, title = "Spliced")
> rmsem <- rmse %>% dplyr::select(m1, m2, RMSEunspliced) %>% 
+   tidyr::spread(key = m2, value = RMSEunspliced) %>%
+   as.data.frame() %>%
+   tibble::column_to_rownames("m1") %>%
+   as.matrix()
> pheatmap::pheatmap(rmsem, title = "Unspliced")
> 
> ## Total number of assigned reads
> df0 <- do.call(dplyr::bind_rows, lapply(sces, function(w) {
+   data.frame(method = metadata(w)$dataset, 
+              spliced_count = sum(assay(w, "spliced")),
+              unspliced_count = sum(assay(w, "unspliced")),
+              stringsAsFactors = FALSE) %>%
+     dplyr::mutate(total_count = spliced_count + unspliced_count)
+ })) %>%
+   tidyr::gather(key = "type", value = "numi", -method)
> 
> ggplot(df0 %>% dplyr::mutate(
+   type = factor(type, levels = c("spliced_count", "unspliced_count", "total_count"))), 
+   aes(x = method, y = numi, fill = type)) + 
+   geom_bar(stat = "identity") + 
+   theme_bw() + 
+   facet_wrap(~ type, nrow = 1) + 
+   theme(legend.position = "none",
+         axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
+   ggtitle("Total count across all genes and cells")
> 
> ## Total number of reads, by gene, across all cells
> df0 <- do.call(dplyr::bind_rows, lapply(sces, function(w) {
+   data.frame(method = metadata(w)$dataset,
+              spliced_count = rowSums(assay(w, "spliced")),
+              unspliced_count = rowSums(assay(w, "unspliced")),
+              total_count = rowSums(assay(w, "spliced")) + 
+                rowSums(assay(w, "unspliced")),
+              stringsAsFactors = FALSE)
+ })) %>% 
+   tidyr::gather(key = "type", value = "numi", -method)
> 
> ggplot(df0 %>% dplyr::mutate(
+   type = factor(type, levels = c("spliced_count", "unspliced_count", "total_count"))), 
+   aes(x = method, y = numi + 1)) + 
+   geom_violin(aes(fill = method), alpha = 0.25) + 
+   facet_wrap(~ type, ncol = 1) + 
+   theme_bw() + 
+   theme(legend.position = "none",
+         axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
+   scale_y_log10() + 
+   ggtitle("Total count per gene, across all cells")
> 
> ## Total number of reads, by cell, across all genes
> df0 <- do.call(dplyr::bind_rows, lapply(sces, function(w) {
+   data.frame(method = metadata(w)$dataset,
+              spliced_count = colSums(assay(w, "spliced")),
+              unspliced_count = colSums(assay(w, "unspliced")),
+              total_count = colSums(assay(w, "spliced")) + 
+                colSums(assay(w, "unspliced")),
+              stringsAsFactors = FALSE)
+ })) %>% 
+   tidyr::gather(key = "type", value = "numi", -method)
> 
> ggplot(df0 %>% dplyr::mutate(
+   type = factor(type, levels = c("spliced_count", "unspliced_count", "total_count"))), 
+   aes(x = method, y = numi)) + 
+   geom_violin(aes(fill = method), alpha = 0.25) + 
+   facet_wrap(~ type, ncol = 1) + 
+   theme_bw() + 
+   theme(legend.position = "none",
+         axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
+   ggtitle("Total count per cell, across all genes")
> 
> ## Fraction spliced, by gene, across all cells
> df1 <- do.call(dplyr::bind_rows, lapply(sces, function(w) {
+   data.frame(method = metadata(w)$dataset,
+              fraction_unspliced = rowSums(assay(w, "unspliced"))/
+                (rowSums(assay(w, "unspliced")) + 
+                   rowSums(assay(w, "spliced"))),
+              stringsAsFactors = FALSE)
+ }))
> 
> ggplot(df1, aes(x = method, y = fraction_unspliced)) + 
+   geom_violin(aes(fill = method), alpha = 0.25) + 
+   theme_bw() + 
+   theme(legend.position = "none",
+         axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) + 
+   ggtitle("Fraction of total gene counts that are 'unspliced'")
Warning message:
Removed 243204 rows containing non-finite values (stat_ydensity). 
> 
> ## Fraction spliced, by cell, across all gene
> df1 <- do.call(dplyr::bind_rows, lapply(sces, function(w) {
+   data.frame(method = metadata(w)$dataset,
+              fraction_unspliced = colSums(assay(w, "unspliced"))/
+                (colSums(assay(w, "unspliced")) + 
+                   colSums(assay(w, "spliced"))),
+              stringsAsFactors = FALSE)
+ }))
> 
> ggplot(df1, aes(x = method, y = fraction_unspliced)) + 
+   geom_violin(aes(fill = method), alpha = 0.25) + 
+   theme_bw() + 
+   theme(legend.position = "none",
+         axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) + 
+   ggtitle("Fraction of total cell counts that are 'unspliced'")
> 
> 
> ## Correlation between spliced and unspliced counts
> df3 <- do.call(dplyr::bind_rows, lapply(sces, function(w) {
+   sct <- as.matrix(assay(w, "spliced"))
+   uct <- as.matrix(assay(w, "unspliced"))
+   a <- scale(sct, center = TRUE, scale = TRUE)
+   b <- scale(uct, center = TRUE, scale = TRUE)
+   corrs <- colSums(a * b)/(nrow(a) - 1)
+   data.frame(method = metadata(w)$dataset,
+              correlation = corrs,
+              stringsAsFactors = FALSE)
+ }))
> 
> ggplot(df3, aes(x = method, y = correlation)) + 
+   geom_violin(aes(fill = method), alpha = 0.5) + 
+   theme_bw() + 
+   theme(legend.position = "none",
+         axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) + 
+   labs(title = "Cell-wise correlation of 'spliced' and 'unspliced' counts")
> 
> 
> dev.off()
null device 
          1 
> saveRDS(NULL, file = outrds)
> 
> date()
[1] "Wed Nov 27 23:46:09 2019"
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /tungstenfs/groups/gbioinfo/Appz/easybuild/software/OpenBLAS/0.3.7-GCC-8.3.0/lib/libopenblas_skylakexp-r0.3.7.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] pheatmap_1.0.12             cowplot_1.0.0              
 [3] scater_1.14.4               SingleCellExperiment_1.8.0 
 [5] SummarizedExperiment_1.16.0 DelayedArray_0.12.0        
 [7] BiocParallel_1.20.0         matrixStats_0.55.0         
 [9] Biobase_2.46.0              GenomicRanges_1.38.0       
[11] GenomeInfoDb_1.22.0         IRanges_2.20.1             
[13] S4Vectors_0.24.0            BiocGenerics_0.32.0        
[15] ggplot2_3.2.1               dplyr_0.8.3                
[17] tximeta_1.4.2              

loaded via a namespace (and not attached):
 [1] ProtGenerics_1.18.0      bitops_1.0-6             bit64_0.9-7             
 [4] RColorBrewer_1.1-2       progress_1.2.2           httr_1.4.1              
 [7] tools_3.6.1              backports_1.1.5          R6_2.4.1                
[10] irlba_2.3.3              vipor_0.4.5              DBI_1.0.0               
[13] lazyeval_0.2.2           colorspace_1.4-1         withr_2.1.2             
[16] tidyselect_0.2.5         gridExtra_2.3            prettyunits_1.0.2       
[19] bit_1.1-14               curl_4.2                 compiler_3.6.1          
[22] BiocNeighbors_1.4.1      labeling_0.3             rtracklayer_1.46.0      
[25] scales_1.1.0             askpass_1.1              rappdirs_0.3.1          
[28] stringr_1.4.0            digest_0.6.23            Rsamtools_2.2.1         
[31] XVector_0.26.0           pkgconfig_2.0.3          dbplyr_1.4.2            
[34] ensembldb_2.10.2         rlang_0.4.2              RSQLite_2.1.2           
[37] DelayedMatrixStats_1.8.0 farver_2.0.1             jsonlite_1.6            
[40] RCurl_1.95-4.12          magrittr_1.5             BiocSingular_1.2.0      
[43] GenomeInfoDbData_1.2.2   Matrix_1.2-17            Rcpp_1.0.3              
[46] ggbeeswarm_0.6.0         munsell_0.5.0            viridis_0.5.1           
[49] lifecycle_0.1.0          stringi_1.4.3            zlibbioc_1.32.0         
[52] BiocFileCache_1.10.2     grid_3.6.1               blob_1.2.0              
[55] crayon_1.3.4             lattice_0.20-38          Biostrings_2.54.0       
[58] GenomicFeatures_1.38.0   hms_0.5.2                zeallot_0.1.0           
[61] pillar_1.4.2             biomaRt_2.42.0           XML_3.98-1.20           
[64] glue_1.3.1               vctrs_0.2.0              gtable_0.3.0            
[67] openssl_1.4.1            purrr_0.3.3              tidyr_1.0.0             
[70] assertthat_0.2.1         rsvd_1.0.2               AnnotationFilter_1.10.0 
[73] viridisLite_0.3.0        tibble_2.1.3             GenomicAlignments_1.22.1
[76] AnnotationDbi_1.48.0     beeswarm_0.2.3           memoise_1.1.0           
[79] tximport_1.14.0          ellipsis_0.3.0          
> 
> proc.time()
    user   system  elapsed 
2216.317  602.222 2817.038 
