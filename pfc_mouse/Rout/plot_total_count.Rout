
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in seq_len(length(args))) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages({
+   library(tximeta)
+   library(dplyr)
+   library(ggplot2)
+   library(SummarizedExperiment)
+   library(SingleCellExperiment)
+   library(scater)
+   library(cowplot)
+   library(pheatmap)
+   library(ggrepel)
+   library(GGally)
+ })
> source(plothelperscript)
> 
> methods <- strsplit(methods, ",")[[1]]
> names(methods) <- methods
> 
> print(plothelperscript)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/scripts/plot_helpers.R"
> print(topdir)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/pfc_mouse"
> print(refdir)  ## directory where uniqueness files are
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/dentate_gyrus_mouse/reference"
> print(tx2gene)
[1] "/tungstenfs/groups/gbioinfo/DB/GENCODE/Mouse/release_M21/tx2gene/gencode.vM21.annotation.tx2gene_full.rds"
> print(methods)
                                       velocyto 
                                     "velocyto" 
  kallisto_bustools_prepref_isocollapse_exclude 
"kallisto_bustools_prepref_isocollapse_exclude" 
  kallisto_bustools_prepref_isoseparate_exclude 
"kallisto_bustools_prepref_isoseparate_exclude" 
  kallisto_bustools_prepref_isocollapse_include 
"kallisto_bustools_prepref_isocollapse_include" 
  kallisto_bustools_prepref_isoseparate_include 
"kallisto_bustools_prepref_isoseparate_include" 
        alevin_prepref_isocollapse_cdna_introns 
      "alevin_prepref_isocollapse_cdna_introns" 
        alevin_prepref_isoseparate_cdna_introns 
      "alevin_prepref_isoseparate_cdna_introns" 
  alevin_prepref_isocollapse_cdna_introns_decoy 
"alevin_prepref_isocollapse_cdna_introns_decoy" 
  alevin_prepref_isoseparate_cdna_introns_decoy 
"alevin_prepref_isoseparate_cdna_introns_decoy" 
                       alevin_spliced_unspliced 
                     "alevin_spliced_unspliced" 
                                       starsolo 
                                     "starsolo" 
                                 starsolo_subtr 
                               "starsolo_subtr" 
> print(outrds)
[1] "plots/total_count/pfc_plot_total_count.rds"
> 
> sces <- lapply(methods, function(nm) {
+   readRDS(file.path(topdir, paste0("output/sce/sce_", nm, ".rds")))
+ })
> 
> tx2gene <- readRDS(tx2gene)
> 
> methods_short <- shorten_methods(methods)
> 
> ## ------------------------------------------------------------------------- ##
> ## Total number of assigned reads
> ## ------------------------------------------------------------------------- ##
> sumdf_bygene <- do.call(dplyr::bind_rows, lapply(sces, function(w) {
+   data.frame(gene = rownames(w),
+              method = metadata(w)$method, 
+              spliced = rowSums(assay(w, "spliced")),
+              unspliced = rowSums(assay(w, "unspliced")),
+              total = rowSums(assay(w, "unspliced")) + rowSums(assay(w, "spliced")),
+              frac_unspliced = rowSums(assay(w, "unspliced"))/(rowSums(assay(w, "unspliced")) + rowSums(assay(w, "spliced"))),
+              stringsAsFactors = FALSE
+   )
+ }))
> 
> ## Add info about uniqueness
> uniq <- merge_uniq(refdir = refdir, tx2gene = tx2gene,
+                    keepgenes = sumdf_bygene$gene)
Warning messages:
1: Factor `frac_unique_bin` contains implicit NA, consider using `forcats::fct_explicit_na` 
2: Factor `frac_unique_bin` contains implicit NA, consider using `forcats::fct_explicit_na` 
> 
> ## ------------------------------------------------------------------------- ##
> ## Plot uniqueness
> ## ------------------------------------------------------------------------- ##
> pdf(gsub("\\.rds$", "_uniqueness.pdf", outrds), width = 8, height = 5)
> ggplot(uniq %>% dplyr::select(-frac_unique_bin) %>% dplyr::group_by(atype) %>% 
+          tidyr::spread(key = "ctype", value = "frac_unique"),
+        aes(x = exonic, y = intronic)) + 
+   geom_abline(slope = 1, intercept = 0) + 
+   geom_point(alpha = 0.25) + 
+   facet_wrap(~ atype) + 
+   theme_bw() + 
+   labs(x = "Fraction unique k-mers, exonic features",
+        y = "Fraction unique k-mers, intronic features",
+        title = "Fraction unique k-mers")
Warning message:
Removed 42628 rows containing missing values (geom_point). 
> 
> ggplot(uniq %>% dplyr::select(-frac_unique_bin) %>% dplyr::group_by(ctype) %>% 
+          tidyr::spread(key = "atype", value = "frac_unique"),
+        aes(x = separate, y = collapse)) + 
+   geom_abline(slope = 1, intercept = 0) + 
+   geom_point(alpha = 0.25) + 
+   facet_wrap(~ ctype) + 
+   theme_bw() + 
+   labs(x = "Fraction unique k-mers, separate",
+        y = "Fraction unique k-mers, collapse",
+        title = "Fraction unique k-mers")
Warning message:
Removed 4279 rows containing missing values (geom_point). 
> 
> ggplot(uniq %>% dplyr::select(-frac_unique_bin), aes(x = frac_unique)) + 
+   geom_histogram(bins = 100) + 
+   facet_grid(atype ~ ctype) + 
+   theme_bw() + 
+   labs(x = "Fraction unique k-mers",
+        y = "count",
+        title = "Fraction unique k-mers")
Warning message:
Removed 8074 rows containing non-finite values (stat_bin). 
> dev.off()
null device 
          1 
> 
> ## ------------------------------------------------------------------------- ##
> ## Plot counts
> ## ------------------------------------------------------------------------- ##
> pdf(gsub("\\.rds$", "_total_count.pdf", outrds), width = 7, height = 12)
> for (ct in c("exonic", "intronic", "overall")) {
+   for (at in c("collapse", "separate")) {
+     print(ggplot(dplyr::bind_rows(
+       sumdf_bygene %>% 
+         dplyr::left_join(uniq %>% dplyr::filter(ctype == ct & 
+                                                   atype == at)) %>% 
+         dplyr::mutate(frac_unique_bin = as.character(frac_unique_bin)) %>% 
+         dplyr::group_by(method, frac_unique_bin) %>% 
+         dplyr::summarize(spliced = sum(spliced), 
+                          unspliced = sum(unspliced), 
+                          total = sum(total)) %>% 
+         tidyr::gather(key = "ctype", value = "count", spliced, unspliced, total) %>%
+         dplyr::mutate(ctype = factor(ctype, 
+                                      levels = c("total", "spliced", "unspliced"))) %>%
+         dplyr::left_join(methods_short, by = "method"), 
+       sumdf_bygene %>% group_by(method) %>% 
+         dplyr::summarize(spliced = sum(spliced), 
+                          unspliced = sum(unspliced), 
+                          total = sum(total)) %>% 
+         tidyr::gather(key = "ctype", value = "count", spliced, unspliced, total) %>%
+         dplyr::mutate(frac_unique_bin = "overall") %>%
+         dplyr::mutate(ctype = factor(ctype, 
+                                      levels = c("total", "spliced", "unspliced"))) %>%
+         dplyr::left_join(methods_short, by = "method")
+     ) %>%
+       dplyr::mutate(frac_unique_bin = relevel(factor(frac_unique_bin), ref = "overall")),
+     aes(x = method_short, y = count, fill = mtype)) + 
+       geom_bar(stat = "identity") + 
+       facet_grid(frac_unique_bin ~ ctype, scale = "free_y") + 
+       theme_bw() + 
+       scale_fill_manual(values = base_method_colors, name = "") + 
+       theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
+             legend.position = "none") + 
+       labs(x = "",
+            y = "Total UMI count across genes in bin",
+            title = paste0("Total count, stratified by ", ct, " uniqueness (", at, ")")))
+   }
+ }
Joining, by = "gene"
Joining, by = "gene"
Joining, by = "gene"
Joining, by = "gene"
Joining, by = "gene"
Joining, by = "gene"
> dev.off()
null device 
          1 
> 
> ## ------------------------------------------------------------------------- ##
> ## Plot scatter plot of total counts
> ## ------------------------------------------------------------------------- ##
> lowerfun <- function(data, mapping) {
+   ggplot(data = data, mapping = mapping) +
+     geom_point(size = 0.3, alpha = 0.3) +
+     geom_abline(slope = 1, intercept = 0, color = "blue")
+ }  
> 
> for (i in c("spliced", "unspliced")) {
+   png(gsub("\\.rds$", paste0("_total_count_scatter_", i, ".png"), outrds), 
+       width = 11, height = 11, unit = "in", res = 400)
+   print(GGally::ggpairs(
+     sumdf_bygene %>% dplyr::left_join(methods_short, by = "method") %>%
+       dplyr::select(c("gene", "method_short", i)) %>%
+       tidyr::spread(key = "method_short", value = i) %>% 
+       tibble::column_to_rownames("gene") %>%
+       dplyr::mutate_all(.funs = log1p),
+     lower = list(continuous = wrap(lowerfun)),
+     title = i, xlab = "log(total gene count + 1)", 
+     ylab = "log(total gene count + 1)") + 
+       theme(strip.text = element_text(size = 5))
+   )
+   dev.off()
+ }
> 
> ## Check number of genes where the count is different between methods
> res <- do.call(dplyr::bind_rows, lapply(c("spliced", "unspliced"), function(tp) {
+   tmp <- sumdf_bygene %>% dplyr::left_join(methods_short, by = "method") %>%
+     dplyr::select(c("gene", "method_short", tp)) %>%
+     tidyr::spread(key = "method_short", value = tp) %>% 
+     tibble::column_to_rownames("gene")
+   do.call(dplyr::bind_rows, lapply(seq_len(ncol(tmp)), function(i) {
+     do.call(dplyr::bind_rows, lapply(seq_len(i - 1), function(j) {
+       data.frame(
+         m1 = ifelse(tp == "spliced", colnames(tmp)[i], colnames(tmp[j])),
+         m2 = ifelse(tp == "spliced", colnames(tmp)[j], colnames(tmp[i])),
+         ctype = tp,
+         tot_genes = nrow(tmp),
+         nbr_equal = sum(tmp[, i] == tmp[, j]),
+         nbr_equal_not0 = sum(tmp[, i] == tmp[, j] & tmp[, i] != 0),
+         nbr_notequal = sum(tmp[, i] != tmp[, j]),
+         nbr_morethan5pdiff = sum(abs(tmp[, i] - tmp[, j]) > 
+                                    0.05 * ((tmp[, i] + tmp[, j])/2)),
+         nbr_morethan10pdiff = sum(abs(tmp[, i] - tmp[, j]) > 
+                                     0.1 * ((tmp[, i] + tmp[, j])/2)),
+         stringsAsFactors = FALSE
+       ) %>%
+         dplyr::mutate(
+           frac_equal = nbr_equal/tot_genes,
+           frac_equal_not0 = nbr_equal_not0/tot_genes,
+           frac_notequal = nbr_notequal/tot_genes,
+           frac_morethan5pdiff = nbr_morethan5pdiff/tot_genes,
+           frac_morethan10pdiff = nbr_morethan10pdiff/tot_genes
+         )
+     }))
+   }))
+ }))
> 
> pdf(gsub("\\.rds$", "_frac_diff_btw_methods.pdf", outrds), width = 13, height = 13)
> print(res %>% dplyr::select(c("m1", "m2", "ctype", contains("frac"))) %>%
+         tidyr::gather(key = "ftype", value = "fraction", -m1, -m2, -ctype) %>%
+         dplyr::mutate(ftype = replace(ftype, ftype == "frac_equal", "Equal"),
+                       ftype = replace(ftype, ftype == "frac_equal_not0", "Equal (not 0)"),
+                       ftype = replace(ftype, ftype == "frac_notequal", "Difference > 0"),
+                       ftype = replace(ftype, ftype == "frac_morethan5pdiff", "Difference > 5%"),
+                       ftype = replace(ftype, ftype == "frac_morethan10pdiff", "Difference > 10%")) %>%
+         dplyr::mutate(ftype = factor(ftype, levels = c("Equal", "Equal (not 0)",
+                                                        "Difference > 0",
+                                                        "Difference > 5%",
+                                                        "Difference > 10%"))) %>%
+         ggplot(aes(x = ftype, y = fraction)) + 
+         geom_bar(stat = "identity", alpha = 0.7, aes(fill = ctype)) + 
+         facet_grid(m1 ~ m2) + 
+         theme_bw() + 
+         theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
+               strip.text = element_text(size = 5)) + 
+         scale_fill_manual(values = c(spliced = "red", unspliced = "blue"),
+                           name = "") + 
+         labs(title = "Differences in total gene count across cells",
+              x = "", y = "Fraction of genes")
+ )
> dev.off()
null device 
          1 
> 
> saveRDS(NULL, file = outrds)
> date()
[1] "Thu Jan 16 22:21:49 2020"
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /tungstenfs/groups/gbioinfo/Appz/easybuild/software/OpenBLAS/0.3.7-GCC-8.3.0/lib/libopenblas_skylakex-r0.3.7.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] GGally_1.4.0                ggrepel_0.8.1              
 [3] pheatmap_1.0.12             cowplot_1.0.0              
 [5] scater_1.14.6               SingleCellExperiment_1.8.0 
 [7] SummarizedExperiment_1.16.1 DelayedArray_0.12.2        
 [9] BiocParallel_1.20.1         matrixStats_0.55.0         
[11] Biobase_2.46.0              GenomicRanges_1.38.0       
[13] GenomeInfoDb_1.22.0         IRanges_2.20.1             
[15] S4Vectors_0.24.1            BiocGenerics_0.32.0        
[17] ggplot2_3.2.1               dplyr_0.8.3                
[19] tximeta_1.4.2              

loaded via a namespace (and not attached):
  [1] ggbeeswarm_0.6.0         colorspace_1.4-1         ellipsis_0.3.0          
  [4] htmlTable_1.13.3         XVector_0.26.0           base64enc_0.1-3         
  [7] BiocNeighbors_1.4.1      rstudioapi_0.10          farver_2.0.1            
 [10] bit64_0.9-7              AnnotationDbi_1.48.0     splines_3.6.1           
 [13] tximport_1.14.0          knitr_1.26               zeallot_0.1.0           
 [16] Formula_1.2-3            jsonlite_1.6             Rsamtools_2.2.1         
 [19] cluster_2.1.0            dbplyr_1.4.2             png_0.1-7               
 [22] compiler_3.6.1           httr_1.4.1               backports_1.1.5         
 [25] assertthat_0.2.1         Matrix_1.2-18            lazyeval_0.2.2          
 [28] BiocSingular_1.2.1       acepack_1.4.1            htmltools_0.4.0         
 [31] prettyunits_1.1.0        tools_3.6.1              rsvd_1.0.2              
 [34] gtable_0.3.0             glue_1.3.1               GenomeInfoDbData_1.2.2  
 [37] reshape2_1.4.3           rappdirs_0.3.1           Rcpp_1.0.3              
 [40] vctrs_0.2.1              Biostrings_2.54.0        rtracklayer_1.46.0      
 [43] DelayedMatrixStats_1.8.0 xfun_0.12                stringr_1.4.0           
 [46] lifecycle_0.1.0          irlba_2.3.3              ensembldb_2.10.2        
 [49] XML_3.98-1.20            zlibbioc_1.32.0          scales_1.1.0            
 [52] hms_0.5.3                ProtGenerics_1.18.0      AnnotationFilter_1.10.0 
 [55] RColorBrewer_1.1-2       curl_4.3                 memoise_1.1.0           
 [58] gridExtra_2.3            biomaRt_2.42.0           rpart_4.1-15            
 [61] reshape_0.8.8            latticeExtra_0.6-29      stringi_1.4.5           
 [64] RSQLite_2.2.0            checkmate_1.9.4          GenomicFeatures_1.38.0  
 [67] rlang_0.4.2              pkgconfig_2.0.3          bitops_1.0-6            
 [70] lattice_0.20-38          purrr_0.3.3              labeling_0.3            
 [73] GenomicAlignments_1.22.1 htmlwidgets_1.5.1        bit_1.1-15              
 [76] tidyselect_0.2.5         plyr_1.8.5               magrittr_1.5            
 [79] R6_2.4.1                 Hmisc_4.3-0              DBI_1.1.0               
 [82] pillar_1.4.3             foreign_0.8-72           withr_2.1.2             
 [85] survival_3.1-8           RCurl_1.95-4.12          nnet_7.3-12             
 [88] tibble_2.1.3             crayon_1.3.4             BiocFileCache_1.10.2    
 [91] viridis_0.5.1            jpeg_0.1-8.1             progress_1.2.2          
 [94] grid_3.6.1               data.table_1.12.8        blob_1.2.0              
 [97] digest_0.6.23            tidyr_1.0.0              openssl_1.4.1           
[100] munsell_0.5.0            beeswarm_0.2.3           viridisLite_0.3.0       
[103] vipor_0.4.5              askpass_1.1             
> 
> proc.time()
   user  system elapsed 
270.096   7.326 278.166 
