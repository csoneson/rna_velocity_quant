
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in seq_len(length(args))) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages({
+   library(dplyr)
+   library(ggplot2)
+   library(SummarizedExperiment)
+   library(SingleCellExperiment)
+   library(cowplot)
+   library(ggrepel)
+   library(cdata)
+ })
> source(plothelperscript)
> 
> methods <- strsplit(methods, ",")[[1]]
> names(methods) <- methods
> 
> print(plothelperscript)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/scripts/plot_helpers.R"
> print(topdir)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/neuron_10k_v3_mouse"
> print(refdir)  ## directory where uniqueness files are
[1] "reference"
> print(tx2gene)
[1] "/tungstenfs/groups/gbioinfo/DB/GENCODE/Mouse/release_M21/tx2gene/gencode.vM21.annotation.tx2gene_full.rds"
> print(methods)
                                       velocyto 
                                     "velocyto" 
  kallisto_bustools_prepref_isocollapse_exclude 
"kallisto_bustools_prepref_isocollapse_exclude" 
  kallisto_bustools_prepref_isoseparate_exclude 
"kallisto_bustools_prepref_isoseparate_exclude" 
  kallisto_bustools_prepref_isocollapse_include 
"kallisto_bustools_prepref_isocollapse_include" 
  kallisto_bustools_prepref_isoseparate_include 
"kallisto_bustools_prepref_isoseparate_include" 
        alevin_prepref_isocollapse_cdna_introns 
      "alevin_prepref_isocollapse_cdna_introns" 
        alevin_prepref_isoseparate_cdna_introns 
      "alevin_prepref_isoseparate_cdna_introns" 
  alevin_prepref_isocollapse_cdna_introns_decoy 
"alevin_prepref_isocollapse_cdna_introns_decoy" 
  alevin_prepref_isoseparate_cdna_introns_decoy 
"alevin_prepref_isoseparate_cdna_introns_decoy" 
                       alevin_spliced_unspliced 
                     "alevin_spliced_unspliced" 
                                       starsolo 
                                     "starsolo" 
                                 starsolo_subtr 
                               "starsolo_subtr" 
> print(outrds)
[1] "plots/frac_unspliced/neuron_plot_frac_unspliced.rds"
> 
> ## ------------------------------------------------------------------------- ##
> ## Read data
> ## ------------------------------------------------------------------------- ##
> sces <- lapply(methods, function(nm) {
+   readRDS(file.path(topdir, paste0("output/sce/sce_", nm, ".rds")))
+ })
> 
> methods_short <- shorten_methods(methods)
> 
> sumdf_bygene <- do.call(dplyr::bind_rows, lapply(sces, function(w) {
+   data.frame(gene = rownames(w),
+              method = metadata(w)$method, 
+              spliced = rowSums(assay(w, "spliced")),
+              unspliced = rowSums(assay(w, "unspliced")),
+              total = rowSums(assay(w, "unspliced")) + rowSums(assay(w, "spliced")),
+              frac_unspliced = rowSums(assay(w, "unspliced"))/
+                (rowSums(assay(w, "unspliced")) + rowSums(assay(w, "spliced"))),
+              stringsAsFactors = FALSE
+   )
+ }))
> 
> tx2gene <- readRDS(tx2gene)
> uniq <- merge_uniq(refdir = refdir, tx2gene = tx2gene, 
+                    keepgenes = sumdf_bygene$gene)
Warning messages:
1: Factor `frac_unique_bin` contains implicit NA, consider using `forcats::fct_explicit_na` 
2: Factor `frac_unique_bin` contains implicit NA, consider using `forcats::fct_explicit_na` 
> 
> ## ------------------------------------------------------------------------- ##
> ## Velocity
> ## ------------------------------------------------------------------------- ##
> ## Read genes used for velocity calculations (2,000 per method)
> geneinfo <- lapply(methods, function(nm) {
+   readr::read_csv(paste0(topdir, "/plots/velocity/anndata_", nm, "/anndata_", nm, 
+                          "_gene_info.csv")) %>%
+     dplyr::mutate(method = nm)
+ })
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
> velocitygenes_freq <- table(unlist(lapply(geneinfo, function(w) w$index)))
> velocitygenes <- 
+   as.character(Reduce(union, lapply(geneinfo, function(w) w$index)))
> sumdf_bygene$scvelo_selected <- sumdf_bygene$gene %in% velocitygenes
> sumdf_bygene$scvelo_selected_nbr <- as.numeric(velocitygenes_freq[sumdf_bygene$gene])
> sumdf_bygene$scvelo_selected_nbr[is.na(sumdf_bygene$scvelo_selected_nbr)] <- 0
> 
> ## Summarize across methods
> sumdf_bygene_acrossmethods <- sumdf_bygene %>%
+   dplyr::group_by(gene, scvelo_selected, scvelo_selected_nbr) %>%
+   dplyr::summarize(sd_frac_unspliced = sd(frac_unspliced),
+                    mean_frac_unspliced = mean(frac_unspliced),
+                    min_frac_unspliced = min(frac_unspliced),
+                    max_frac_unspliced = max(frac_unspliced))
> 
> ## Plot ----
> sumdf_bygene_acrossmethods_scvelosel <- 
+   sumdf_bygene_acrossmethods %>% dplyr::filter(scvelo_selected)
> qtl <- quantile(sumdf_bygene_acrossmethods_scvelosel$sd_frac_unspliced, 0.9, na.rm = TRUE)
> pdf(gsub("\\.rds$", "_fracunspliced_sd_distr.pdf", outrds))
> ggplot(sumdf_bygene_acrossmethods_scvelosel, 
+        aes(x = sd_frac_unspliced)) + 
+   geom_histogram(bins = 100, fill = "lightgrey") + 
+   geom_vline(xintercept = qtl) + 
+   theme_bw() + 
+   labs(x = "Standard deviation of fraction UMIs in unspliced targets",
+        y = "Number of genes",
+        title = "Variability of the unspliced fractions across quantifications, by gene",
+        subtitle = paste0("Only genes selected by scVelo for at least one quantification (n=", 
+                          nrow(sumdf_bygene_acrossmethods_scvelosel), ")")) 
Warning message:
Removed 54 rows containing non-finite values (stat_bin). 
> dev.off()
null device 
          1 
> 
> ## Retain top 10% ---- 
> genes_to_keep <- sumdf_bygene_acrossmethods_scvelosel %>%
+   dplyr::filter(sd_frac_unspliced > qtl) %>%
+   dplyr::pull(gene)
> print(length(genes_to_keep))
[1] 392
> 
> ## Cluster the selected genes based on their unspliced fraction pattern across methods ---- 
> clstdata <- sumdf_bygene %>% dplyr::filter(gene %in% genes_to_keep) %>%
+   dplyr::select(gene, method, frac_unspliced) %>%
+   dplyr::left_join(methods_short) %>% 
+   dplyr::select(gene, method_short, frac_unspliced) %>%
+   tidyr::spread(key = "method_short", value = "frac_unspliced") %>%
+   as.data.frame() %>%
+   tibble::column_to_rownames("gene")
Joining, by = "method"
> clstannot <- sumdf_bygene %>% dplyr::filter(gene %in% genes_to_keep) %>%
+   dplyr::select(gene, method, total) %>%
+   dplyr::left_join(methods_short) %>% 
+   dplyr::select(gene, method_short, total) %>%
+   tidyr::spread(key = "method_short", value = "total") %>%
+   as.data.frame() %>%
+   tibble::column_to_rownames("gene")
Joining, by = "method"
> 
> hcl <- hclust(d = as.dist(sqrt(2 - 2*cor(t(clstdata)))))
> clusters <- cutree(hcl, k = 10)
> 
> pdf(gsub("\\.rds$", "_fracunspliced_clustering.pdf", outrds), 
+     width = 10, height = 25)
> print(pheatmap::pheatmap(
+   clstdata, cluster_rows = hcl, cutree_rows = 10, 
+   scale = "none", fontsize_row = 4,
+   annotation_row = data.frame(clusters = factor(clusters), row.names = names(clusters))))
> dev.off()
null device 
          1 
> 
> for (i in unique(clusters)) {
+   gn <- names(clusters[clusters == i])
+   if (length(gn) > 2) {
+     pdf(gsub("\\.rds$", paste0("_fracunspliced_clustering_cluster", i, ".pdf"), outrds),
+         width = 8, height = 5 + length(gn) * 0.07)
+     print(pheatmap::pheatmap(
+       clstdata[gn, ], scale = "none",
+       fontsize_row = 5,
+       main = paste0("cluster ", i)))
+     dev.off()
+   }
+ }
> 
> ## Summarize each cluster by its centroid
> ms <- split(clstdata, f = clusters)
> m <- do.call(dplyr::bind_rows, lapply(ms, colMeans))
> 
> ## Find most similar gene in each cluster
> cl_rep <- do.call(dplyr::bind_rows, lapply(unique(clusters), function(w) {
+   tmp <- cor(t(ms[[w]]), t(m[w, , drop = FALSE]))
+   data.frame(cluster = w, 
+              gene = rownames(tmp),
+              cor = tmp[, 1],
+              stringsAsFactors = FALSE)
+ }))
> print(do.call(dplyr::bind_rows, 
+               lapply(split(cl_rep, cl_rep$cluster), 
+                      function(w) w %>% arrange(desc(cor)) %>% head(3))))
   cluster          gene       cor
1        1       Plekha1 0.9848022
2        1          Cul9 0.9806071
3        1         Dmtf1 0.9778448
4        2        Tvp23a 0.9980180
5        2        Adgre5 0.9975881
6        2           Lss 0.9975019
7        3        Trim68 0.9870678
8        3         Stac3 0.9846632
9        3 1700093K21Rik 0.9839425
10       4          Sacs 0.9966281
11       4         Nrxn2 0.9945514
12       4        Zfp101 0.9940376
13       5        Pex11g 0.9820948
14       5        Gtpbp3 0.9795762
15       5        Zfp207 0.9732502
16       6        Gm2237 0.9633457
17       6        Rnase4 0.9562392
18       6         Efnb2 0.9449832
19       7         Taf1c 0.9503884
20       7         Cdan1 0.9135474
21       7      Mettl21c 0.9091772
22       8          Ly6h 0.9942799
23       8           Id3 0.9919905
24       8         Aplnr 0.9906006
25       9         Lbhd1 0.9391738
26       9       Gm15832 0.9242833
27       9         Ube2s 0.9133317
28      10       Six3os1 0.9783532
29      10         Tra2a 0.9690998
30      10         Obsl1 0.9618836
> write.table(cl_rep %>% dplyr::arrange(cluster, desc(cor)), 
+             file = gsub("\\.rds$", "_fracunspliced_cluster_centroid_corrs.txt", outrds),
+             row.names = FALSE, col.names = TRUE, quote = FALSE, sep = "\t")
>       
> ## Plot centroids and correlations within each cluster
> rn <- round(1e7 * runif(1))
> tmpdir <- tempdir()
> png(paste0(tmpdir, "/pheatmap", rn, ".png"), width = 6,
+     height = 5, unit = "in", res = 400)
> print(pheatmap::pheatmap(m, cluster_rows = FALSE, cluster_cols = TRUE, treeheight_col = 10, 
+                          main = "Centroid cluster profiles"))
> dev.off()
null device 
          1 
> g <- ggplot(cl_rep, aes(x = factor(cluster), y = cor)) + geom_boxplot(outlier.size = -1) + 
+   geom_jitter(width = 0.2, height = 0) + theme_bw() + 
+   labs(x = "Cluster", y = "Correlations with centroid profile")
> pdf(gsub("\\.rds$", "_fracunspliced_cluster_centroids.pdf", outrds), width = 10, height = 5)
> cowplot::plot_grid(
+   cowplot::ggdraw() +
+     cowplot::draw_image(paste0(tmpdir, "/pheatmap", rn, ".png")),
+   g,
+   nrow = 1, rel_widths = c(6, 4), labels = c("A", "B")
+ )
> dev.off()
null device 
          1 
> 
> ## Uniqueness for each cluster
> uniqsub <- uniq %>% 
+   dplyr::left_join(
+     as.data.frame(clusters) %>% tibble::rownames_to_column("gene")
+   ) %>%
+   dplyr::filter(!is.na(clusters)) %>%
+   tidyr::unite(col = "actype", ctype, atype, sep = ".") %>%
+   dplyr::mutate(clusters = factor(clusters, levels = sort(unique(as.numeric(clusters)))))
Joining, by = "gene"
>   
> pdf(gsub("\\.rds$", "_uniqueness_by_cluster.pdf", outrds), width = 7, height = 5)
> ggplot(uniqsub, aes(x = clusters, 
+                     y = frac_unique, 
+                     fill = clusters)) + 
+   geom_boxplot(alpha = 0.5) + 
+   facet_wrap(~ actype) + 
+   theme_bw() + 
+   labs(x = "Cluster", y = "Uniqueness") + 
+   theme(legend.position = "none")
> dev.off()
null device 
          1 
> 
> saveRDS(NULL, file = outrds)
> 
> date()
[1] "Thu Jan 16 22:32:40 2020"
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /tungstenfs/groups/gbioinfo/Appz/easybuild/software/OpenBLAS/0.3.7-GCC-8.3.0/lib/libopenblas_skylakex-r0.3.7.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] cdata_1.1.4                 ggrepel_0.8.1              
 [3] cowplot_1.0.0               SingleCellExperiment_1.8.0 
 [5] SummarizedExperiment_1.16.1 DelayedArray_0.12.2        
 [7] BiocParallel_1.20.1         matrixStats_0.55.0         
 [9] Biobase_2.46.0              GenomicRanges_1.38.0       
[11] GenomeInfoDb_1.22.0         IRanges_2.20.1             
[13] S4Vectors_0.24.1            BiocGenerics_0.32.0        
[15] ggplot2_3.2.1               dplyr_0.8.3                

loaded via a namespace (and not attached):
 [1] tidyr_1.0.0            splines_3.6.1          rquery_1.4.1          
 [4] Formula_1.2-3          assertthat_0.2.1       latticeExtra_0.6-29   
 [7] wrapr_1.9.3            GenomeInfoDbData_1.2.2 pillar_1.4.3          
[10] backports_1.1.5        lattice_0.20-38        glue_1.3.1            
[13] digest_0.6.23          RColorBrewer_1.1-2     XVector_0.26.0        
[16] checkmate_1.9.4        colorspace_1.4-1       htmltools_0.4.0       
[19] Matrix_1.2-18          pkgconfig_2.0.3        pheatmap_1.0.12       
[22] magick_2.2             zlibbioc_1.32.0        purrr_0.3.3           
[25] scales_1.1.0           jpeg_0.1-8.1           htmlTable_1.13.3      
[28] tibble_2.1.3           farver_2.0.1           ellipsis_0.3.0        
[31] withr_2.1.2            nnet_7.3-12            lazyeval_0.2.2        
[34] survival_3.1-8         magrittr_1.5           crayon_1.3.4          
[37] foreign_0.8-72         tools_3.6.1            data.table_1.12.8     
[40] hms_0.5.3              lifecycle_0.1.0        stringr_1.4.0         
[43] munsell_0.5.0          cluster_2.1.0          compiler_3.6.1        
[46] rqdatatable_1.2.5      rlang_0.4.2            grid_3.6.1            
[49] RCurl_1.95-4.12        rstudioapi_0.10        htmlwidgets_1.5.1     
[52] labeling_0.3           bitops_1.0-6           base64enc_0.1-3       
[55] gtable_0.3.0           R6_2.4.1               gridExtra_2.3         
[58] knitr_1.26             zeallot_0.1.0          Hmisc_4.3-0           
[61] readr_1.3.1            stringi_1.4.5          Rcpp_1.0.3            
[64] vctrs_0.2.1            rpart_4.1-15           acepack_1.4.1         
[67] png_0.1-7              tidyselect_0.2.5       xfun_0.12             
> 
> proc.time()
   user  system elapsed 
222.254  12.992 237.000 
