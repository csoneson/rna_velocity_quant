
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in seq_len(length(args))) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages({
+   library(tximeta)
+   library(dplyr)
+   library(ggplot2)
+   library(zeallot)
+   library(BUSpaRse)
+   library(SummarizedExperiment)
+   library(SingleCellExperiment)
+   library(velocyto.R)
+   library(scater)
+ })
> 
> print(topdir)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/neuron_10k_v3"
> print(tx2gene)
[1] "/tungstenfs/groups/gbioinfo/DB/GENCODE/Mouse/release_M21/tx2gene/gencode.vM21.annotation.tx2gene_full.rds"
> print(outrds)
[1] "output/summarize_spliced_unspliced.rds"
> 
> tx2gene <- readRDS(tx2gene)
> 
> ## ========================================================================= ##
> ## Read quantifications and create SingleCellExperiment objects
> ## ========================================================================= ##
> ## CellRanger + velocyto
> loom <- velocyto.R::read.loom.matrices(file.path(topdir, "quants/cellranger/neuron_10k_v3/velocyto/neuron_10k_v3.loom"))
reading loom file via hdf5r...
> velocyto <- SingleCellExperiment(
+   assays = list(counts = loom$spliced,
+                 spliced = loom$spliced,
+                 unspliced = loom$unspliced)
+ )
> colnames(velocyto) <- gsub("neuron_10k_v3:", "", gsub("x$", "", colnames(velocyto)))
> 
> ## cDNA/introns separately (with decoys)
> cdna <- tximeta(coldata = data.frame(
+   names = "neuron_10k_v3",
+   files = file.path(topdir, "quants/salmon_gencodevM21_cDNA_intronsasdecoy/alevin/quants_mat.gz"),
+   stringsAsFactors = FALSE
+ ), type = "alevin")
importing quantifications
importing alevin data is much faster after installing `fishpond` (>= 1.1.18)
reading in alevin gene-level counts across cells 
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
> cdna <- cdna[grep("I\\.$", rownames(cdna), invert = TRUE), ]
> introns <- tximeta(coldata = data.frame(
+   names = "neuron_10k_v3",
+   files = file.path(topdir, "quants/salmon_gencodevM21_introns_cDNAasdecoy/alevin/quants_mat.gz"),
+   stringsAsFactors = FALSE
+ ), type = "alevin")
importing quantifications
importing alevin data is much faster after installing `fishpond` (>= 1.1.18)
reading in alevin gene-level counts across cells 
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
> introns <- introns[grep("I\\.$", rownames(introns)), ]
> ucounts <- round(assay(introns, "counts"))
> scounts <- round(assay(cdna, "counts"))
> rownames(ucounts) <- gsub("\\.I\\.$", "", rownames(ucounts))
> rownames(scounts) <- gsub("\\.$", "", rownames(scounts))
> ucounts <- ucounts[rownames(ucounts) %in% rownames(scounts), colnames(ucounts) %in% colnames(scounts)]
> ucounts2 <- scounts
> ucounts2[] <- 0
> tm <- as(ucounts, "dgTMatrix")
> ucounts2[cbind(match(rownames(ucounts)[tm@i + 1], rownames(ucounts2)), 
+                match(colnames(ucounts)[tm@j + 1], colnames(ucounts2)))] <- tm@x
> stopifnot(all(rownames(ucounts2) == rownames(scounts)))
> stopifnot(all(colnames(ucounts2) == colnames(scounts)))
> stopifnot(sum(ucounts2) == sum(ucounts))
> cdna_introns_decoy <- SingleCellExperiment(
+   assays = list(counts = as(scounts, "dgCMatrix"),
+                 spliced = as(scounts, "dgCMatrix"),
+                 unspliced = as(ucounts2, "dgCMatrix"))
+ )
> rownames(cdna_introns_decoy) <- scater::uniquifyFeatureNames(
+   ID = rownames(cdna_introns_decoy),
+   names = tx2gene$gene_name[match(rownames(cdna_introns_decoy), tx2gene$gene_id)]
+ )
> 
> ## cDNA + introns
> cdna_introns <- tximeta(coldata = data.frame(
+   names = "neuron_10k_v3",
+   files = file.path(topdir, "quants/salmon_gencodevM21_cDNA_introns/alevin/quants_mat.gz"),
+   stringsAsFactors = FALSE
+ ), type = "alevin")
importing quantifications
importing alevin data is much faster after installing `fishpond` (>= 1.1.18)
reading in alevin gene-level counts across cells 
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
> uidx <- grep("\\.I\\.$", rownames(cdna_introns))
> sidx <- grep("\\.I\\.$", rownames(cdna_introns), invert = TRUE)
> ucounts <- round(assay(cdna_introns, "counts")[uidx, ])
> scounts <- round(assay(cdna_introns, "counts")[sidx, ])
> rownames(ucounts) <- gsub("\\.I\\.$", "", rownames(ucounts))
> rownames(scounts) <- gsub("\\.$", "", rownames(scounts))
> ucounts <- ucounts[rownames(ucounts) %in% rownames(scounts), ]
> ucounts2 <- scounts
> ucounts2[] <- 0
> tm <- as(ucounts, "dgTMatrix")
> ucounts2[cbind(match(rownames(ucounts)[tm@i + 1], rownames(ucounts2)), 
+                match(colnames(ucounts)[tm@j + 1], colnames(ucounts2)))] <- tm@x
> stopifnot(all(rownames(ucounts2) == rownames(scounts)))
> stopifnot(all(colnames(ucounts2) == colnames(scounts)))
> stopifnot(sum(ucounts2) == sum(ucounts))
> cdna_introns <- SingleCellExperiment(
+   assays = list(counts = as(scounts, "dgCMatrix"),
+                 spliced = as(scounts, "dgCMatrix"),
+                 unspliced = as(ucounts2, "dgCMatrix"))
+ )
> rownames(cdna_introns) <- scater::uniquifyFeatureNames(
+   ID = rownames(cdna_introns),
+   names = tx2gene$gene_name[match(rownames(cdna_introns), tx2gene$gene_id)]
+ )
> 
> ## cDNA + collapsed introns
> cdna_intronscollapsed <- tximeta(coldata = data.frame(
+   names = "neuron_10k_v3",
+   files = file.path(topdir, "quants/salmon_gencodevM21_cDNA_intronscollapsed/alevin/quants_mat.gz"),
+   stringsAsFactors = FALSE
+ ), type = "alevin")
importing quantifications
importing alevin data is much faster after installing `fishpond` (>= 1.1.18)
reading in alevin gene-level counts across cells 
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
> uidx <- grep("\\.I\\.$", rownames(cdna_intronscollapsed))
> sidx <- grep("\\.I\\.$", rownames(cdna_intronscollapsed), invert = TRUE)
> ucounts <- round(assay(cdna_intronscollapsed, "counts")[uidx, ])
> scounts <- round(assay(cdna_intronscollapsed, "counts")[sidx, ])
> rownames(ucounts) <- gsub("\\.I\\.$", "", rownames(ucounts))
> rownames(scounts) <- gsub("\\.$", "", rownames(scounts))
> ucounts <- ucounts[rownames(ucounts) %in% rownames(scounts), ]
> ucounts2 <- scounts
> ucounts2[] <- 0
> tm <- as(ucounts, "dgTMatrix")
> ucounts2[cbind(match(rownames(ucounts)[tm@i + 1], rownames(ucounts2)), 
+                match(colnames(ucounts)[tm@j + 1], colnames(ucounts2)))] <- tm@x
> stopifnot(all(rownames(ucounts2) == rownames(scounts)))
> stopifnot(all(colnames(ucounts2) == colnames(scounts)))
> stopifnot(sum(ucounts2) == sum(ucounts))
> cdna_intronscollapsed <- SingleCellExperiment(
+   assays = list(counts = as(scounts, "dgCMatrix"),
+                 spliced = as(scounts, "dgCMatrix"),
+                 unspliced = as(ucounts2, "dgCMatrix"))
+ )
> rownames(cdna_intronscollapsed) <- scater::uniquifyFeatureNames(
+   ID = rownames(cdna_intronscollapsed),
+   names = tx2gene$gene_name[match(rownames(cdna_intronscollapsed), tx2gene$gene_id)]
+ )
> 
> ## spliced + unspliced
> spliced_unspliced <- tximeta(coldata = data.frame(
+   names = "neuron_10k_v3",
+   files = file.path(topdir, "quants/salmon_gencodevM21_spliced_unspliced/alevin/quants_mat.gz"),
+   stringsAsFactors = FALSE
+ ), type = "alevin")
importing quantifications
importing alevin data is much faster after installing `fishpond` (>= 1.1.18)
reading in alevin gene-level counts across cells 
couldn't find matching transcriptome, returning non-ranged SummarizedExperiment
> uidx <- grep("_unspliced$", rownames(spliced_unspliced))
> sidx <- grep("_unspliced$", rownames(spliced_unspliced), invert = TRUE)
> ucounts <- round(assay(spliced_unspliced, "counts")[uidx, ])
> scounts <- round(assay(spliced_unspliced, "counts")[sidx, ])
> rownames(ucounts) <- gsub("_unspliced$", "", rownames(ucounts))
> ucounts <- ucounts[rownames(ucounts) %in% rownames(scounts), ]
> ucounts2 <- scounts
> ucounts2[] <- 0
> tm <- as(ucounts, "dgTMatrix")
> ucounts2[cbind(match(rownames(ucounts)[tm@i + 1], rownames(ucounts2)), 
+                match(colnames(ucounts)[tm@j + 1], colnames(ucounts2)))] <- tm@x
> stopifnot(all(rownames(ucounts2) == rownames(scounts)))
> stopifnot(all(colnames(ucounts2) == colnames(scounts)))
> stopifnot(sum(ucounts2) == sum(ucounts))
> spliced_unspliced <- SingleCellExperiment(
+   assays = list(counts = as(scounts, "dgCMatrix"),
+                 spliced = as(scounts, "dgCMatrix"),
+                 unspliced = as(ucounts2, "dgCMatrix"))
+ )
> rownames(spliced_unspliced) <- scater::uniquifyFeatureNames(
+   ID = rownames(spliced_unspliced),
+   names = tx2gene$gene_name[match(rownames(spliced_unspliced), tx2gene$gene_id)]
+ )
> 
> 
> ## spliced
> spliced <- tximeta(coldata = data.frame(
+   names = "neuron_10k_v3",
+   files = file.path(topdir, "quants/salmon_gencodevM21_spliced/alevin/quants_mat.gz"),
+   stringsAsFactors = FALSE
+ ), type = "alevin")
importing quantifications
importing alevin data is much faster after installing `fishpond` (>= 1.1.18)
reading in alevin gene-level counts across cells 
found matching transcriptome:
[ GENCODE - Mus musculus - release M21 ]
loading existing TxDb created: 2019-10-24 09:43:29
Loading required package: GenomicFeatures
Loading required package: AnnotationDbi

Attaching package: 'AnnotationDbi'

The following object is masked from 'package:dplyr':

    select

generating gene ranges
loading existing gene ranges created: 2019-10-24 09:44:11
fetching genome info for GENCODE
> rownames(spliced) <- scater::uniquifyFeatureNames(
+   ID = rownames(spliced),
+   names = tx2gene$gene_name[match(rownames(spliced), tx2gene$gene_id)]
+ )
> spliced <- as(spliced, "SingleCellExperiment")
> 
> ## kallisto/bustools
> ## separate
> kallistodir <- file.path(topdir, "quants/kallisto_bustools_gencodevM21_isoseparate_exonfull_cDNA_introns")
> c(spliced_bus, unspliced_bus) %<-% 
+   read_velocity_output(spliced_dir = kallistodir,
+                        spliced_name = "spliced",
+                        unspliced_dir = kallistodir,
+                        unspliced_name = "unspliced")
> rownames(spliced_bus) <- gsub("\\.$", "", rownames(spliced_bus))
> rownames(unspliced_bus) <- gsub("\\.$", "", rownames(unspliced_bus))
> stopifnot(all(rownames(spliced_bus) == rownames(unspliced_bus)))
> kallistobus_cells <- intersect(colnames(spliced_bus), colnames(unspliced_bus))
> kallistobus_separate <- SingleCellExperiment(
+   assays = list(counts = spliced_bus[, kallistobus_cells],
+                 spliced = spliced_bus[, kallistobus_cells],
+                 unspliced = unspliced_bus[, kallistobus_cells])
+ )
> rownames(kallistobus_separate) <- scater::uniquifyFeatureNames(
+   ID = rownames(kallistobus_separate),
+   names = tx2gene$gene_name[match(rownames(kallistobus_separate), tx2gene$gene_id)]
+ )
> 
> ## separate, permissive
> kallistodir <- file.path(topdir, "quants/kallisto_bustools_gencodevM21_isoseparate_exonfull_cDNA_introns")
> c(spliced_bus, unspliced_bus) %<-% 
+   read_velocity_output(spliced_dir = kallistodir,
+                        spliced_name = "spliced.permissive",
+                        unspliced_dir = kallistodir,
+                        unspliced_name = "unspliced.permissive")
> rownames(spliced_bus) <- gsub("\\.$", "", rownames(spliced_bus))
> rownames(unspliced_bus) <- gsub("\\.$", "", rownames(unspliced_bus))
> stopifnot(all(rownames(spliced_bus) == rownames(unspliced_bus)))
> kallistobus_cells <- intersect(colnames(spliced_bus), colnames(unspliced_bus))
> kallistobus_sep_permissive <- SingleCellExperiment(
+   assays = list(counts = spliced_bus[, kallistobus_cells], 
+                 spliced = spliced_bus[, kallistobus_cells],
+                 unspliced = unspliced_bus[, kallistobus_cells])
+ )
> rownames(kallistobus_sep_permissive) <- scater::uniquifyFeatureNames(
+   ID = rownames(kallistobus_sep_permissive),
+   names = tx2gene$gene_name[match(rownames(kallistobus_sep_permissive), tx2gene$gene_id)]
+ )
> 
> ## collapse
> kallistodir <- file.path(topdir, "quants/kallisto_bustools_gencodevM21_isocollapse_exonfull_cDNA_introns")
> c(spliced_bus, unspliced_bus) %<-% 
+   read_velocity_output(spliced_dir = kallistodir,
+                        spliced_name = "spliced",
+                        unspliced_dir = kallistodir,
+                        unspliced_name = "unspliced")
> rownames(spliced_bus) <- gsub("\\.$", "", rownames(spliced_bus))
> rownames(unspliced_bus) <- gsub("\\.$", "", rownames(unspliced_bus))
> stopifnot(all(rownames(spliced_bus) == rownames(unspliced_bus)))
> kallistobus_cells <- intersect(colnames(spliced_bus), colnames(unspliced_bus))
> kallistobus_collapse <- SingleCellExperiment(
+   assays = list(counts = spliced_bus[, kallistobus_cells], 
+                 spliced = spliced_bus[, kallistobus_cells],
+                 unspliced = unspliced_bus[, kallistobus_cells])
+ )
> rownames(kallistobus_collapse) <- scater::uniquifyFeatureNames(
+   ID = rownames(kallistobus_collapse),
+   names = tx2gene$gene_name[match(rownames(kallistobus_collapse), tx2gene$gene_id)]
+ )
> 
> ## collapse, permissive
> kallistodir <- file.path(topdir, "quants/kallisto_bustools_gencodevM21_isocollapse_exonfull_cDNA_introns")
> c(spliced_bus, unspliced_bus) %<-% 
+   read_velocity_output(spliced_dir = kallistodir,
+                        spliced_name = "spliced.permissive",
+                        unspliced_dir = kallistodir,
+                        unspliced_name = "unspliced.permissive")
> rownames(spliced_bus) <- gsub("\\.$", "", rownames(spliced_bus))
> rownames(unspliced_bus) <- gsub("\\.$", "", rownames(unspliced_bus))
> stopifnot(all(rownames(spliced_bus) == rownames(unspliced_bus)))
> kallistobus_cells <- intersect(colnames(spliced_bus), colnames(unspliced_bus))
> kallistobus_coll_permissive <- SingleCellExperiment(
+   assays = list(counts = spliced_bus[, kallistobus_cells], 
+                 spliced = spliced_bus[, kallistobus_cells],
+                 unspliced = unspliced_bus[, kallistobus_cells])
+ )
> rownames(kallistobus_coll_permissive) <- scater::uniquifyFeatureNames(
+   ID = rownames(kallistobus_coll_permissive),
+   names = tx2gene$gene_name[match(rownames(kallistobus_coll_permissive), tx2gene$gene_id)]
+ )
> 
> ## ========================================================================= ##
> ## subset to shared cells/genes
> ## ========================================================================= ##
> shared_cells <- Reduce(intersect, list(colnames(velocyto),
+                                        colnames(cdna_introns_decoy),
+                                        colnames(cdna_introns),
+                                        colnames(cdna_intronscollapsed),
+                                        colnames(spliced_unspliced),
+                                        colnames(spliced),
+                                        colnames(kallistobus_separate),
+                                        colnames(kallistobus_collapse),
+                                        colnames(kallistobus_sep_permissive),
+                                        colnames(kallistobus_coll_permissive)))
> shared_genes <- Reduce(intersect, list(rownames(velocyto),
+                                        rownames(cdna_introns_decoy),
+                                        rownames(cdna_introns),
+                                        rownames(cdna_intronscollapsed),
+                                        rownames(spliced_unspliced),
+                                        rownames(spliced),
+                                        rownames(kallistobus_separate),
+                                        rownames(kallistobus_collapse),
+                                        rownames(kallistobus_sep_permissive),
+                                        rownames(kallistobus_coll_permissive)))
> 
> velocyto <- velocyto[shared_genes, shared_cells]
> cdna_introns_decoy <- cdna_introns_decoy[shared_genes, shared_cells]
> cdna_introns <- cdna_introns[shared_genes, shared_cells]
> cdna_intronscollapsed <- cdna_intronscollapsed[shared_genes, shared_cells]
> spliced_unspliced <- spliced_unspliced[shared_genes, shared_cells]
> spliced <- spliced[shared_genes, shared_cells]
> kallistobus_separate <- kallistobus_separate[shared_genes, shared_cells]
> kallistobus_collapse <- kallistobus_collapse[shared_genes, shared_cells]
> kallistobus_sep_permissive <- kallistobus_sep_permissive[shared_genes, shared_cells]
> kallistobus_coll_permissive <- kallistobus_coll_permissive[shared_genes, shared_cells]
> 
> ## ========================================================================= ##
> ## Save
> ## ========================================================================= ##
> saveRDS(velocyto, file = file.path(dirname(outrds), "sce_velocyto.rds"))
> saveRDS(cdna_introns_decoy, file = file.path(dirname(outrds), "sce_cdna_introns_decoy.rds"))
> saveRDS(cdna_introns, file = file.path(dirname(outrds), "sce_cdna_introns.rds"))
> saveRDS(cdna_intronscollapsed, file = file.path(dirname(outrds), "sce_cdna_intronscollapsed.rds"))
> saveRDS(spliced_unspliced, file = file.path(dirname(outrds), "sce_spliced_unspliced.rds"))
> saveRDS(spliced, file = file.path(dirname(outrds), "sce_spliced.rds"))
> saveRDS(kallistobus_separate, file = file.path(dirname(outrds), "sce_kallistobus_separate.rds"))
> saveRDS(kallistobus_collapse, file = file.path(dirname(outrds), "sce_kallistobus_collapse.rds"))
> saveRDS(kallistobus_sep_permissive, file = file.path(dirname(outrds), "sce_kallistobus_sep_permissive.rds"))
> saveRDS(kallistobus_coll_permissive, file = file.path(dirname(outrds), "sce_kallistobus_coll_permissive.rds"))
> saveRDS(NULL, file = outrds)
> 
> date()
[1] "Sun Nov  3 07:58:18 2019"
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /tungstenfs/groups/gbioinfo/Appz/easybuild/software/OpenBLAS/0.3.7-GCC-8.3.0/lib/libopenblas_skylakexp-r0.3.7.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] GenomicFeatures_1.38.0      AnnotationDbi_1.48.0       
 [3] scater_1.14.0               velocyto.R_0.6             
 [5] Matrix_1.2-17               SingleCellExperiment_1.8.0 
 [7] SummarizedExperiment_1.16.0 DelayedArray_0.12.0        
 [9] BiocParallel_1.20.0         matrixStats_0.55.0         
[11] Biobase_2.46.0              GenomicRanges_1.38.0       
[13] GenomeInfoDb_1.22.0         IRanges_2.20.0             
[15] S4Vectors_0.24.0            BiocGenerics_0.32.0        
[17] BUSpaRse_1.0.0              zeallot_0.1.0              
[19] ggplot2_3.2.1               dplyr_0.8.3                
[21] tximeta_1.4.0              

loaded via a namespace (and not attached):
 [1] nlme_3.1-141             ProtGenerics_1.18.0      bitops_1.0-6            
 [4] bit64_0.9-7              progress_1.2.2           httr_1.4.1              
 [7] tools_3.6.1              backports_1.1.5          irlba_2.3.3             
[10] R6_2.4.0                 vipor_0.4.5              DBI_1.0.0               
[13] lazyeval_0.2.2           mgcv_1.8-30              colorspace_1.4-1        
[16] withr_2.1.2              gridExtra_2.3            tidyselect_0.2.5        
[19] prettyunits_1.0.2        bit_1.1-14               curl_4.2                
[22] compiler_3.6.1           BiocNeighbors_1.4.0      hdf5r_1.0.0             
[25] rtracklayer_1.46.0       scales_1.0.0             askpass_1.1             
[28] rappdirs_0.3.1           stringr_1.4.0            digest_0.6.22           
[31] Rsamtools_2.2.0          XVector_0.26.0           pkgconfig_2.0.3         
[34] dbplyr_1.4.2             ensembldb_2.10.0         BSgenome_1.54.0         
[37] rlang_0.4.1              RSQLite_2.1.2            DelayedMatrixStats_1.8.0
[40] jsonlite_1.6             RCurl_1.95-4.12          magrittr_1.5            
[43] BiocSingular_1.2.0       GenomeInfoDbData_1.2.2   ggbeeswarm_0.6.0        
[46] Rcpp_1.0.2               munsell_0.5.0            viridis_0.5.1           
[49] lifecycle_0.1.0          stringi_1.4.3            MASS_7.3-51.4           
[52] zlibbioc_1.32.0          BiocFileCache_1.10.0     grid_3.6.1              
[55] blob_1.2.0               crayon_1.3.4             lattice_0.20-38         
[58] Biostrings_2.54.0        splines_3.6.1            hms_0.5.2               
[61] pillar_1.4.2             biomaRt_2.42.0           XML_3.98-1.20           
[64] glue_1.3.1               pcaMethods_1.78.0        data.table_1.12.6       
[67] RcppParallel_4.4.4       vctrs_0.2.0              gtable_0.3.0            
[70] openssl_1.4.1            purrr_0.3.3              tidyr_1.0.0             
[73] assertthat_0.2.1         rsvd_1.0.2               AnnotationFilter_1.10.0 
[76] viridisLite_0.3.0        tibble_2.1.3             beeswarm_0.2.3          
[79] GenomicAlignments_1.22.0 plyranges_1.6.0          memoise_1.1.0           
[82] tximport_1.14.0          cluster_2.1.0           
> 
> proc.time()
    user   system  elapsed 
 967.995  139.904 1098.008 
