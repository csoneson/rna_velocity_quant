
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in seq_len(length(args))) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages({
+   library(dplyr)
+   library(ggplot2)
+   library(SummarizedExperiment)
+   library(SingleCellExperiment)
+   library(cowplot)
+   library(ggrepel)
+   library(cdata)
+   library(pheatmap)
+   library(ggsci)
+ })
> source(plothelperscript)
> 
> methods <- strsplit(methods, ",")[[1]]
> names(methods) <- methods
> 
> print(plothelperscript)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/scripts/plot_helpers.R"
> print(topdir)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/dentate_gyrus_mouse"
> print(refdir)  ## directory where uniqueness files are
[1] "reference"
> print(tx2gene)
[1] "/tungstenfs/groups/gbioinfo/DB/GENCODE/Mouse/release_M21/tx2gene/gencode.vM21.annotation.tx2gene_full.rds"
> print(methods)
           kallisto_bustools_prepref_isocollapse_exclude 
         "kallisto_bustools_prepref_isocollapse_exclude" 
           kallisto_bustools_prepref_isoseparate_exclude 
         "kallisto_bustools_prepref_isoseparate_exclude" 
           kallisto_bustools_prepref_isocollapse_include 
         "kallisto_bustools_prepref_isocollapse_include" 
           kallisto_bustools_prepref_isoseparate_include 
         "kallisto_bustools_prepref_isoseparate_include" 
                                                starsolo 
                                              "starsolo" 
                                          starsolo_subtr 
                                        "starsolo_subtr" 
        alevin_prepref_isocollapse_cdna_introns_gentrome 
      "alevin_prepref_isocollapse_cdna_introns_gentrome" 
        alevin_prepref_isoseparate_cdna_introns_gentrome 
      "alevin_prepref_isoseparate_cdna_introns_gentrome" 
  alevin_prepref_isocollapse_cdna_introns_decoy_gentrome 
"alevin_prepref_isocollapse_cdna_introns_decoy_gentrome" 
  alevin_prepref_isoseparate_cdna_introns_decoy_gentrome 
"alevin_prepref_isoseparate_cdna_introns_decoy_gentrome" 
                       alevin_spliced_unspliced_gentrome 
                     "alevin_spliced_unspliced_gentrome" 
> print(outrds)
[1] "plots/frac_unspliced/dentate_gyrus_plot_frac_unspliced.rds"
> 
> ## ------------------------------------------------------------------------- ##
> ## Read data
> ## ------------------------------------------------------------------------- ##
> sces <- lapply(methods, function(nm) {
+   readRDS(file.path(topdir, paste0("output/sce/sce_", nm, ".rds")))
+ })
> 
> methods_short <- shorten_methods(methods)
> 
> sumdf_bygene <- do.call(dplyr::bind_rows, lapply(sces, function(w) {
+   data.frame(gene = rownames(w),
+              method = metadata(w)$method, 
+              spliced = rowSums(assay(w, "spliced")),
+              unspliced = rowSums(assay(w, "unspliced")),
+              total = rowSums(assay(w, "unspliced")) + rowSums(assay(w, "spliced")),
+              frac_unspliced = rowSums(assay(w, "unspliced"))/
+                (rowSums(assay(w, "unspliced")) + rowSums(assay(w, "spliced"))),
+              stringsAsFactors = FALSE
+   )
+ }))
> 
> tx2gene <- readRDS(tx2gene)
> uniq <- merge_uniq(refdir = refdir, tx2gene = tx2gene, 
+                    keepgenes = sumdf_bygene$gene)
Warning messages:
1: Factor `frac_unique_bin` contains implicit NA, consider using `forcats::fct_explicit_na` 
2: Factor `frac_unique_bin` contains implicit NA, consider using `forcats::fct_explicit_na` 
> 
> ## ------------------------------------------------------------------------- ##
> ## Velocity
> ## ------------------------------------------------------------------------- ##
> ## Read genes used for velocity calculations (2,000 per method)
> geneinfo <- lapply(methods, function(nm) {
+   readr::read_csv(paste0(topdir, "/plots/velocity/anndata_", nm, "/anndata_", nm, 
+                          "_gene_info.csv")) %>%
+     dplyr::mutate(method = nm)
+ })
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  index = col_character(),
  velocity_genes = col_logical()
)
See spec(...) for full column specifications.
> velocitygenes_freq <- table(unlist(lapply(geneinfo, function(w) w$index)))
> velocitygenes <- 
+   as.character(Reduce(union, lapply(geneinfo, function(w) w$index)))
> sumdf_bygene$scvelo_selected <- sumdf_bygene$gene %in% velocitygenes
> sumdf_bygene$scvelo_selected_nbr <- as.numeric(velocitygenes_freq[sumdf_bygene$gene])
> sumdf_bygene$scvelo_selected_nbr[is.na(sumdf_bygene$scvelo_selected_nbr)] <- 0
> 
> ## Summarize across methods
> sumdf_bygene_acrossmethods <- sumdf_bygene %>%
+   dplyr::group_by(gene, scvelo_selected, scvelo_selected_nbr) %>%
+   dplyr::summarize(sd_frac_unspliced = sd(frac_unspliced),
+                    mean_frac_unspliced = mean(frac_unspliced),
+                    min_frac_unspliced = min(frac_unspliced),
+                    max_frac_unspliced = max(frac_unspliced))
> 
> ## Plot ----
> sumdf_bygene_acrossmethods_scvelosel <- 
+   sumdf_bygene_acrossmethods %>% dplyr::filter(scvelo_selected)
> qtl <- quantile(sumdf_bygene_acrossmethods_scvelosel$sd_frac_unspliced, 0.9, na.rm = TRUE)
> pdf(gsub("\\.rds$", "_fracunspliced_sd_distr.pdf", outrds))
> ggplot(sumdf_bygene_acrossmethods_scvelosel, 
+        aes(x = sd_frac_unspliced)) + 
+   geom_histogram(bins = 100, fill = "lightgrey") + 
+   geom_vline(xintercept = qtl) + 
+   theme_bw() + 
+   labs(x = "Standard deviation of fraction UMIs in unspliced targets",
+        y = "Number of genes",
+        title = "Variability of the unspliced fractions across quantifications, by gene",
+        subtitle = paste0("Only genes selected by scVelo for at least one quantification (n=", 
+                          nrow(sumdf_bygene_acrossmethods_scvelosel), ")")) 
Warning message:
Removed 58 rows containing non-finite values (stat_bin). 
> dev.off()
null device 
          1 
> 
> ## Retain top 10% ---- 
> genes_to_keep <- sumdf_bygene_acrossmethods_scvelosel %>%
+   dplyr::filter(sd_frac_unspliced > qtl) %>%
+   dplyr::pull(gene)
> print(length(genes_to_keep))
[1] 449
> 
> ## Cluster the selected genes based on their unspliced fraction pattern across methods ---- 
> clstdata <- sumdf_bygene %>% dplyr::filter(gene %in% genes_to_keep) %>%
+   dplyr::select(gene, method, frac_unspliced) %>%
+   dplyr::left_join(methods_short) %>% 
+   dplyr::select(gene, method_short, frac_unspliced) %>%
+   tidyr::spread(key = "method_short", value = "frac_unspliced") %>%
+   as.data.frame() %>%
+   tibble::column_to_rownames("gene")
Joining, by = "method"
> 
> hcl <- hclust(d = as.dist(sqrt(2 - 2*cor(t(clstdata)))))
> clusters <- cutree(hcl, k = 10)
> nm <- names(clusters)
> ## Relabel from top down
> ordr <- data.frame(current = unique(clusters[hcl$order]),
+                    future = 1:10)
> print(ordr)
   current future
1        2      1
2        7      2
3        6      3
4        1      4
5       10      5
6        8      6
7        5      7
8        3      8
9        9      9
10       4     10
> clusters <- ordr$future[match(clusters, ordr$current)]
> names(clusters) <- nm
> 
> clstannot <- sumdf_bygene %>% dplyr::filter(gene %in% genes_to_keep) %>%
+   dplyr::select(gene, method, total) %>%
+   dplyr::left_join(methods_short) %>% 
+   dplyr::select(gene, method_short, mtype, total) %>%
+   dplyr::group_by(gene) %>%
+   dplyr::mutate(rel_total = total/max(total)) %>%
+   dplyr::mutate(cluster = clusters[gene])
Joining, by = "method"
> 
> png(gsub("\\.rds$", "_fracunspliced_clustering.png", outrds), 
+     width = 10, height = 10, unit = "in", res = 400)
> print(pheatmap::pheatmap(
+   clstdata, cluster_rows = hcl, cutree_rows = 10, 
+   scale = "none", fontsize_row = 4,
+   show_rownames = FALSE, show_colnames = TRUE, 
+   annotation_row = data.frame(clusters = factor(clusters), row.names = names(clusters)),
+   color = colorRampPalette(colors = c("grey95", "steelblue"))(100),
+   annotation_colors = list(clusters = structure(ggsci::pal_npg()(10), names = 1:10))))
> dev.off()
null device 
          1 
> 
> pdf(gsub("\\.rds$", "_fracunspliced_clustering_with_reltotal.pdf", outrds),
+     width = 10, height = 15)
> print(
+   cowplot::plot_grid(
+     cowplot::ggdraw() +
+       cowplot::draw_image(gsub("\\.rds$", "_fracunspliced_clustering.png", outrds)),
+     cowplot::plot_grid(
+       ggplot(clstannot, aes(x = method_short, y = rel_total, fill = mtype)) + 
+         facet_wrap(~ cluster, nrow = 2) + 
+         geom_boxplot(outlier.size = 0.5, alpha = 0.75) + 
+         labs(x = "", y = "Total count/maximum total count across methods") + 
+         theme_bw() + 
+         scale_fill_manual(values = base_method_colors, name = "") + 
+         theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
+               legend.position = "none"),
+       NULL, rel_widths = c(1, 0.12), nrow = 1),
+     ncol = 1, rel_heights = c(1, 0.5)
+   )
+ )
> dev.off()
null device 
          1 
> 
> for (i in unique(clusters)) {
+   gn <- names(clusters[clusters == i])
+   if (length(gn) > 2) {
+     pdf(gsub("\\.rds$", paste0("_fracunspliced_clustering_cluster", i, ".pdf"), outrds),
+         width = 8, height = 5 + length(gn) * 0.07)
+     print(pheatmap::pheatmap(
+       clstdata[gn, ], scale = "none",
+       fontsize_row = 5,
+       main = paste0("cluster ", i),
+       color = colorRampPalette(colors = c("grey95", "steelblue"))(100)))
+     dev.off()
+   }
+ }
> 
> ## Summarize each cluster by its centroid
> ms <- split(clstdata, f = clusters)
> m <- do.call(dplyr::bind_rows, lapply(ms, colMeans))
> 
> ## Find most similar gene in each cluster
> cl_rep <- do.call(dplyr::bind_rows, lapply(unique(clusters), function(w) {
+   tmp <- cor(t(ms[[w]]), t(m[w, , drop = FALSE]))
+   data.frame(cluster = w, 
+              gene = rownames(tmp),
+              cor = tmp[, 1],
+              stringsAsFactors = FALSE)
+ }))
> print(do.call(dplyr::bind_rows, 
+               lapply(split(cl_rep, cl_rep$cluster), 
+                      function(w) w %>% arrange(desc(cor)) %>% head(3))))
   cluster          gene       cor
1        1         Pcbp2 0.9984541
2        1        Homer3 0.9984330
3        1         Mrpl3 0.9981687
4        2         Coq8b 0.9815483
5        2           Pnp 0.9815187
6        2          Nfs1 0.9760988
7        3       Arfgap2 0.9936964
8        3         Rnpep 0.9865405
9        3         Abcb9 0.9789787
10       4          LTO1 0.9957891
11       4        Cryzl2 0.9951355
12       4       Zfyve21 0.9941136
13       5         Mrap2 0.9661225
14       5       Mterf1b 0.9579890
15       6        Nudcd3 0.9793479
16       6        Tecpr2 0.9712353
17       6         Tapbp 0.9527891
18       7        Acadsb 0.9871860
19       7         Ints2 0.9861106
20       7         Lzts1 0.9851458
21       8          Rgs1 0.9899951
22       8         Casp3 0.9858556
23       8         Igsf9 0.9851784
24       9       Brip1os 0.9904555
25       9       Gm48957 0.9800480
26       9        Pla2g3 0.9757300
27      10 4931440P22Rik 0.9467481
28      10          Rad1 0.9260390
29      10         Ccnt2 0.9246958
> write.table(cl_rep %>% dplyr::arrange(cluster, desc(cor)), 
+             file = gsub("\\.rds$", "_fracunspliced_cluster_centroid_corrs.txt", outrds),
+             row.names = FALSE, col.names = TRUE, quote = FALSE, sep = "\t")
>       
> ## Plot centroids and correlations within each cluster
> rn <- round(1e7 * runif(1))
> tmpdir <- tempdir()
> png(paste0(tmpdir, "/pheatmap", rn, ".png"), width = 6,
+     height = 5, unit = "in", res = 400)
> print(pheatmap::pheatmap(m, cluster_rows = FALSE, cluster_cols = TRUE, treeheight_col = 10, 
+                          main = "Centroid cluster profiles"))
> dev.off()
null device 
          1 
> g <- ggplot(cl_rep, aes(x = factor(cluster), y = cor)) + geom_boxplot(outlier.size = -1) + 
+   geom_jitter(width = 0.2, height = 0) + theme_bw() + 
+   labs(x = "Cluster", y = "Correlations with centroid profile")
> pdf(gsub("\\.rds$", "_fracunspliced_cluster_centroids.pdf", outrds), width = 10, height = 5)
> cowplot::plot_grid(
+   cowplot::ggdraw() +
+     cowplot::draw_image(paste0(tmpdir, "/pheatmap", rn, ".png")),
+   g,
+   nrow = 1, rel_widths = c(6, 4), labels = c("A", "B")
+ )
> dev.off()
null device 
          1 
> 
> ## Uniqueness for each cluster
> uniqsub <- uniq %>% 
+   dplyr::left_join(
+     as.data.frame(clusters) %>% tibble::rownames_to_column("gene")
+   ) %>%
+   dplyr::filter(!is.na(clusters)) %>%
+   tidyr::unite(col = "actype", ctype, atype, sep = ".") %>%
+   dplyr::mutate(clusters = factor(clusters, levels = sort(unique(as.numeric(clusters)))))
Joining, by = "gene"
>   
> pdf(gsub("\\.rds$", "_uniqueness_by_cluster.pdf", outrds), width = 7, height = 5)
> ggplot(uniqsub, aes(x = clusters, 
+                     y = frac_unique, 
+                     fill = clusters)) + 
+   geom_boxplot(alpha = 0.5) + 
+   facet_wrap(~ actype) + 
+   theme_bw() + 
+   labs(x = "Cluster", y = "Uniqueness") + 
+   theme(legend.position = "none")
> dev.off()
null device 
          1 
> 
> saveRDS(NULL, file = outrds)
> 
> date()
[1] "Wed Feb  5 09:26:46 2020"
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /tungstenfs/groups/gbioinfo/Appz/easybuild/software/OpenBLAS/0.3.7-GCC-8.3.0/lib/libopenblas_skylakex-r0.3.7.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] ggsci_2.9                   pheatmap_1.0.12            
 [3] cdata_1.1.5                 ggrepel_0.8.1              
 [5] cowplot_1.0.0               SingleCellExperiment_1.8.0 
 [7] SummarizedExperiment_1.16.1 DelayedArray_0.12.2        
 [9] BiocParallel_1.20.1         matrixStats_0.55.0         
[11] Biobase_2.46.0              GenomicRanges_1.38.0       
[13] GenomeInfoDb_1.22.0         IRanges_2.20.2             
[15] S4Vectors_0.24.3            BiocGenerics_0.32.0        
[17] ggplot2_3.2.1               dplyr_0.8.4                

loaded via a namespace (and not attached):
 [1] tidyr_1.0.2            splines_3.6.1          rquery_1.4.2          
 [4] Formula_1.2-3          assertthat_0.2.1       latticeExtra_0.6-29   
 [7] wrapr_1.9.6            GenomeInfoDbData_1.2.2 pillar_1.4.3          
[10] backports_1.1.5        lattice_0.20-38        glue_1.3.1            
[13] digest_0.6.23          RColorBrewer_1.1-2     XVector_0.26.0        
[16] checkmate_1.9.4        colorspace_1.4-1       htmltools_0.4.0       
[19] Matrix_1.2-18          pkgconfig_2.0.3        magick_2.3            
[22] zlibbioc_1.32.0        purrr_0.3.3            scales_1.1.0          
[25] jpeg_0.1-8.1           tibble_2.1.3           htmlTable_1.13.3      
[28] farver_2.0.3           ellipsis_0.3.0         withr_2.1.2           
[31] nnet_7.3-12            lazyeval_0.2.2         survival_3.1-8        
[34] magrittr_1.5           crayon_1.3.4           foreign_0.8-72        
[37] tools_3.6.1            data.table_1.12.8      hms_0.5.3             
[40] lifecycle_0.1.0        stringr_1.4.0          munsell_0.5.0         
[43] cluster_2.1.0          compiler_3.6.1         rqdatatable_1.2.6     
[46] rlang_0.4.4            grid_3.6.1             RCurl_1.98-1.1        
[49] rstudioapi_0.10        htmlwidgets_1.5.1      labeling_0.3          
[52] bitops_1.0-6           base64enc_0.1-3        gtable_0.3.0          
[55] R6_2.4.1               gridExtra_2.3          knitr_1.27            
[58] Hmisc_4.3-0            readr_1.3.1            stringi_1.4.5         
[61] Rcpp_1.0.3             vctrs_0.2.2            rpart_4.1-15          
[64] acepack_1.4.1          png_0.1-7              tidyselect_1.0.0      
[67] xfun_0.12             
> 
> proc.time()
   user  system elapsed 
 78.908   3.594  80.586 
