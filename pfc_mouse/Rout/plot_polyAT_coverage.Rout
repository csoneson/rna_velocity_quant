
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in seq_len(length(args))) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages({
+   library(BiocGenerics)
+   library(Biostrings)
+   library(IRanges)
+   library(GenomicRanges)
+   library(dplyr)
+   library(ggplot2)
+   library(rtracklayer)
+ })
> 
> print(genome)
[1] "/tungstenfs/groups/gbioinfo/DB/GENCODE/Mouse/release_M21/GRCm38.primary_assembly.genome.fa"
> print(gtf)
[1] "/tungstenfs/groups/gbioinfo/DB/GENCODE/Mouse/release_M21/gencode.vM21.annotation.gtf"
> print(bwpos)
[1] "quants/cellranger/PFCsample2/outs/possorted_genome_bam_retcells_plusstrand.bw"
> print(bwneg)
[1] "quants/cellranger/PFCsample2/outs/possorted_genome_bam_retcells_minusstrand.bw"
> print(dataset)
[1] "PFC"
> print(outrds)
[1] "plots/polyAT_coverage/pfc_plot_polyAT_coverage.rds"
> 
> ## Read genome sequence
> dss <- Biostrings::readDNAStringSet(genome)
> names(dss) <- sapply(strsplit(names(dss), " "), .subset, 1)
> 
> ## Find polyA/T stretches, at least 15nt, max 1 mismatch per 15 nt
> polya <- IRanges::reduce(
+   as(Biostrings::vmatchPattern("AAAAAAAAAAAAAAA", dss, max.mismatch = 1), "GRanges")
+ )
> polyt <- IRanges::reduce(
+   as(Biostrings::vmatchPattern("TTTTTTTTTTTTTTT", dss, max.mismatch = 1), "GRanges")
+ )
> 
> ## Get unambiguously intronic regions and split by gene strand
> txdb <- GenomicFeatures::makeTxDbFromGFF(gtf, format = "gtf")
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
Warning message:
In .get_cds_IDX(mcols0$type, mcols0$phase) :
  The "phase" metadata column contains non-NA values for features of type
  stop_codon. This information was ignored.
> grl <- GenomicFeatures::exonsBy(txdb, by = "gene")
> grl <- GenomicRanges::reduce(grl)
> gri <- BiocGenerics::setdiff(range(grl), grl)
> introns <- BiocGenerics::unlist(gri)
> exons <- BiocGenerics::unlist(grl)
> introns <- BiocGenerics::setdiff(introns, exons) ## remove exons from other genes
> introns_fwd <- subset(introns, strand == "+")
> introns_rev <- subset(introns, strand == "-")
> 
> ## Keep only polyA/T stretches fully in introns
> ## Note that the "polyA" is always extracted from the forward strand of the genome
> ## So a polyT here in a gene on the negative strand represents a polyA in the actual transcript
> polyai_fwd <- IRanges::subsetByOverlaps(x = polya, ranges = introns_fwd, type = "within")
> polyai_rev <- IRanges::subsetByOverlaps(x = polya, ranges = introns_rev, type = "within")
> polyti_fwd <- IRanges::subsetByOverlaps(x = polyt, ranges = introns_fwd, type = "within")
> polyti_rev <- IRanges::subsetByOverlaps(x = polyt, ranges = introns_rev, type = "within")
> 
> ## polyA, genes on forward strand, reads on forward strand
> ## expand each polyA range to 600bp upstream and 600bp downstream
> polyai_gfwd_rfwd <- colMeans(as.matrix(rtracklayer::import(
+   bwpos, selection = rtracklayer::BigWigSelection(
+     ranges = GenomicRanges::resize(
+       GenomicRanges::resize(polyai_fwd, width = 601, fix = "end"),
+       width = 1201, fix = "start"
+     )
+   ), as = "NumericList"
+ )))
> 
> ## polyT, genes on forward strand, reads on reverse strand
> ## expand each polyT range to 600bp upstream and 600bp downstream
> polyti_gfwd_rrev <- colMeans(as.matrix(rtracklayer::import(
+   bwneg, selection = rtracklayer::BigWigSelection(
+     ranges = GenomicRanges::resize(
+       GenomicRanges::resize(polyti_fwd, width = 601, fix = "start"),
+       width = 1201, fix = "end"
+     )
+   ), as = "NumericList"
+ )))
> 
> ## polyT, genes on reverse strand, reads on reverse strand
> ## expand each polyT range to 600bp upstream and 600bp downstream
> polyti_grev_rrev <- colMeans(as.matrix(rtracklayer::import(
+   bwneg, selection = rtracklayer::BigWigSelection(
+     ranges = GenomicRanges::resize(
+       GenomicRanges::resize(polyti_rev, width = 601, fix = "start"),
+       width = 1201, fix = "end"
+     )
+   ), as = "NumericList"
+ )))
> 
> ## polyA, genes on reverse strand, reads on forward strand
> ## expand each polyA range to 600bp upstream and 600bp downstream
> polyai_grev_rfwd <- colMeans(as.matrix(rtracklayer::import(
+   bwpos, selection = rtracklayer::BigWigSelection(
+     ranges = GenomicRanges::resize(
+       GenomicRanges::resize(polyai_rev, width = 601, fix = "end"),
+       width = 1201, fix = "start"
+     )
+   ), as = "NumericList"
+ )))
> 
> 
> 
> df <- dplyr::bind_rows(
+   data.frame(gtype = "polyA, + genes", 
+              position = (-600):600,
+              coverage = polyai_gfwd_rfwd,
+              ctype = "concordant",
+              stringsAsFactors = FALSE),
+   data.frame(gtype = "polyT, + genes", 
+              position = (-600):600,
+              coverage = polyti_gfwd_rrev,
+              ctype = "discordant",
+              stringsAsFactors = FALSE),
+   data.frame(gtype = "polyT, - genes", 
+              position = (-600):600,
+              coverage = polyti_grev_rrev,
+              ctype = "concordant",
+              stringsAsFactors = FALSE),
+   data.frame(gtype = "polyA, - genes", 
+              position = (-600):600,
+              coverage = polyai_grev_rfwd,
+              ctype = "discordant",
+              stringsAsFactors = FALSE)
+ )
> 
> pdf(gsub("rds", "pdf", outrds), height = 3, width = 6)
> ggplot(df, aes(x = position, y = coverage, color = gtype)) + 
+   geom_line(aes(size = ctype)) + 
+   scale_size_manual(values = c(discordant = 1.5, concordant = 3),
+                     name = "") + 
+   scale_color_manual(values = c(`polyA, + genes` = "forestgreen",
+                                 `polyA, - genes` = "olivedrab3",
+                                 `polyT, - genes` = "darkred",
+                                 `polyT, + genes` = "orange"),
+                      name = "") + 
+   theme_bw() + 
+   labs(x = "Position relative to end of polyA/T stretch",
+        y = "Average coverage",
+        title = dataset)
> dev.off()
null device 
          1 
> 
> saveRDS(NULL, file = outrds)
> date()
[1] "Sat Feb 22 17:01:33 2020"
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /tungstenfs/groups/gbioinfo/Appz/easybuild/software/OpenBLAS/0.3.7-GCC-8.3.0/lib/libopenblas_skylakex-r0.3.7.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats4    parallel  stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] rtracklayer_1.46.0   ggplot2_3.2.1        dplyr_0.8.4         
 [4] GenomicRanges_1.38.0 GenomeInfoDb_1.22.0  Biostrings_2.54.0   
 [7] XVector_0.26.0       IRanges_2.20.2       S4Vectors_0.24.3    
[10] BiocGenerics_0.32.0 

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.3                  lattice_0.20-38            
 [3] prettyunits_1.1.1           Rsamtools_2.2.1            
 [5] assertthat_0.2.1            digest_0.6.23              
 [7] BiocFileCache_1.10.2        R6_2.4.1                   
 [9] RSQLite_2.2.0               httr_1.4.1                 
[11] pillar_1.4.3                zlibbioc_1.32.0            
[13] rlang_0.4.4                 GenomicFeatures_1.38.1     
[15] progress_1.2.2              lazyeval_0.2.2             
[17] curl_4.3                    blob_1.2.1                 
[19] Matrix_1.2-18               labeling_0.3               
[21] BiocParallel_1.20.1         stringr_1.4.0              
[23] RCurl_1.98-1.1              bit_1.1-15.2               
[25] biomaRt_2.42.0              munsell_0.5.0              
[27] DelayedArray_0.12.2         compiler_3.6.1             
[29] pkgconfig_2.0.3             askpass_1.1                
[31] openssl_1.4.1               tidyselect_1.0.0           
[33] SummarizedExperiment_1.16.1 tibble_2.1.3               
[35] GenomeInfoDbData_1.2.2      matrixStats_0.55.0         
[37] XML_3.99-0.3                crayon_1.3.4               
[39] dbplyr_1.4.2                withr_2.1.2                
[41] GenomicAlignments_1.22.1    bitops_1.0-6               
[43] rappdirs_0.3.1              grid_3.6.1                 
[45] gtable_0.3.0                lifecycle_0.1.0            
[47] DBI_1.1.0                   magrittr_1.5               
[49] scales_1.1.0                stringi_1.4.5              
[51] farver_2.0.3                vctrs_0.2.2                
[53] tools_3.6.1                 bit64_0.9-7                
[55] Biobase_2.46.0              glue_1.3.1                 
[57] purrr_0.3.3                 hms_0.5.3                  
[59] AnnotationDbi_1.48.0        colorspace_1.4-1           
[61] memoise_1.1.0              
> 
> 
> proc.time()
   user  system elapsed 
138.267  11.333 167.471 
