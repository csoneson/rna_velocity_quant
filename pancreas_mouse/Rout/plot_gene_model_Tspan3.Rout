
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in seq_len(length(args))) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages({
+   library(swissknife)
+   library(ggplot2)
+   library(cowplot)
+   library(dplyr)
+   library(magick)
+   library(SummarizedExperiment)
+   library(SingleCellExperiment)
+ })
> 
> methods <- strsplit(methods, ",")[[1]]
> names(methods) <- methods
> 
> print(topdir)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/pancreas_mouse"
> print(refdir)  ## directory where uniqueness files are
[1] "reference"
> print(plothelperscript)
[1] "/tungstenfs/groups/gbioinfo/sonechar/Projects/alevin_velocity/scripts/plot_helpers.R"
> print(gtf)
[1] "/tungstenfs/groups/gbioinfo/DB/GENCODE/Mouse/release_M21/gencode.vM21.annotation.gtf"
> print(tx2gene)
[1] "/tungstenfs/groups/gbioinfo/DB/GENCODE/Mouse/release_M21/tx2gene/gencode.vM21.annotation.tx2gene_full.rds"
> print(methods)
                                                velocyto 
                                              "velocyto" 
           kallisto_bustools_prepref_isocollapse_exclude 
         "kallisto_bustools_prepref_isocollapse_exclude" 
           kallisto_bustools_prepref_isoseparate_exclude 
         "kallisto_bustools_prepref_isoseparate_exclude" 
           kallisto_bustools_prepref_isocollapse_include 
         "kallisto_bustools_prepref_isocollapse_include" 
           kallisto_bustools_prepref_isoseparate_include 
         "kallisto_bustools_prepref_isoseparate_include" 
                                                starsolo 
                                              "starsolo" 
                                          starsolo_subtr 
                                        "starsolo_subtr" 
        alevin_prepref_isocollapse_cdna_introns_gentrome 
      "alevin_prepref_isocollapse_cdna_introns_gentrome" 
        alevin_prepref_isoseparate_cdna_introns_gentrome 
      "alevin_prepref_isoseparate_cdna_introns_gentrome" 
  alevin_prepref_isocollapse_cdna_introns_decoy_gentrome 
"alevin_prepref_isocollapse_cdna_introns_decoy_gentrome" 
  alevin_prepref_isoseparate_cdna_introns_decoy_gentrome 
"alevin_prepref_isoseparate_cdna_introns_decoy_gentrome" 
                       alevin_spliced_unspliced_gentrome 
                     "alevin_spliced_unspliced_gentrome" 
                                       kb_python_lamanno 
                                     "kb_python_lamanno" 
> print(bigwigfileplus)
[1] "quants/cellranger/SRR9201794/outs/possorted_genome_bam_retcells_plusstrand.bw"
> print(bigwigfileminus)
[1] "quants/cellranger/SRR9201794/outs/possorted_genome_bam_retcells_minusstrand.bw"
> print(samplename)
[1] "Pancreas"
> print(showgene)
[1] "Tspan3"
> print(outpdf)
[1] "plots/genes/pancreas_Tspan3.pdf"
> 
> source(plothelperscript)
> 
> gr <- prepareGTF(gtf)
> bwf <- c(bigwigfileplus, bigwigfileminus)
> names(bwf) <- c("pos", "neg")
> bwc <- c("pos", "neg")
> names(bwc) <- c("pos", "neg")
> tx2gene <- readRDS(tx2gene)
> 
> sces <- lapply(methods, function(nm) {
+   readRDS(file.path(topdir, paste0("output/sce/sce_", nm, ".rds")))
+ })
> 
> sumdf_bygene <- do.call(dplyr::bind_rows, lapply(sces, function(w) {
+   data.frame(gene = rownames(w),
+              method = metadata(w)$method, 
+              spliced = rowSums(assay(w, "spliced")),
+              unspliced = rowSums(assay(w, "unspliced")),
+              total = rowSums(assay(w, "unspliced")) + rowSums(assay(w, "spliced")),
+              frac_unspliced = rowSums(assay(w, "unspliced"))/(rowSums(assay(w, "unspliced")) + rowSums(assay(w, "spliced"))),
+              stringsAsFactors = FALSE
+   )
+ }))
> 
> uniq <- merge_uniq(refdir = refdir, tx2gene = tx2gene,
+                    keepgenes = sumdf_bygene$gene)
Warning messages:
1: Factor `frac_unique_bin` contains implicit NA, consider using `forcats::fct_explicit_na` 
2: Factor `frac_unique_bin` contains implicit NA, consider using `forcats::fct_explicit_na` 
> 
> methods_short <- shorten_methods(methods)
> 
> plot_gene_model <- function(gr, bwf, bwc, showgene, sumdfg, methodsdf, uniq) {
+   
+   rn <- round(1e7 * runif(1))
+   tmpdir <- tempdir()
+   grDevices::png(paste0(tmpdir, "/gviz", rn, ".png"), width = 10.5,
+                  height = 5.25, unit = "in", res = 400)
+   swissknife::plotGeneRegion(granges = gr, bigwigFiles = bwf, 
+                              bigwigCond = bwc, 
+                              showgene = showgene, geneTrackTitle = showgene,
+                              colorByStrand = TRUE, 
+                              condColors = c(pos = "blue", neg = "red"),
+                              scaleDataTracks = TRUE)
+   grDevices::dev.off()
+   
+   plotdfg <- sumdfg %>% dplyr::filter(gene == showgene) %>%
+     dplyr::select(gene, method, spliced, unspliced, frac_unspliced) %>%
+     tidyr::gather(key = "ctype", value = "count", spliced, unspliced, frac_unspliced) %>%
+     dplyr::left_join(methodsdf, by = "method") %>%
+     dplyr::mutate(ctype = replace(ctype, ctype == "frac_unspliced", "frac unspl")) %>%
+     dplyr::mutate(ctype = factor(ctype, levels = c("spliced", "unspliced", "frac unspl")))
+   dummy <- data.frame(method_short = plotdfg$method_short[1], 
+                       ctype = c("spliced", "unspliced", "frac unspl"),
+                       mtype = plotdfg$mtype[1],
+                       count = c(rep(max(plotdfg$count), 2), 1),
+                       stringsAsFactors = FALSE) %>%
+     dplyr::mutate(ctype = factor(ctype, levels = c("spliced", "unspliced", "frac unspl")))
+   
+   p2 <- ggplot(plotdfg,
+                aes(x = method_short, y = count, fill = mtype)) + 
+     geom_blank(data = dummy) + 
+     geom_bar(stat = "identity") + 
+     facet_wrap(~ ctype, nrow = 1, scales = "free_x") + 
+     theme_bw() + 
+     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
+           legend.position = "none") + 
+     scale_fill_manual(values = base_method_colors) + 
+     labs(x = "", title = "Total UMI count/fraction unspliced count", y = "") + 
+     scale_y_continuous(expand = c(0, 0, 0.05, 0)) + 
+     coord_flip()
+   
+   ## Change relative widths of facets
+   ## See https://stackoverflow.com/questions/52341385/how-to-automatically-adjust-the-width-of-each-facet-for-facet-wrap
+   gp <- ggplotGrob(p2)
+   # get gtable columns corresponding to the facets
+   facet.columns <- gp$layout$l[grepl("panel", gp$layout$name)]
+   gp$widths[facet.columns] <- unit(c(1, 1, 0.5), "null")
+   p2 <- gp
+ 
+   p3 <- ggplot(uniq %>% dplyr::filter(gene == showgene) %>%
+                  tidyr::unite(col = "categ", ctype, atype, sep = "."),
+                aes(x = categ, y = frac_unique)) + 
+     geom_bar(stat = "identity") + 
+     theme_bw() + 
+     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
+           legend.position = "none") + 
+     labs(x = "", title = "Uniqueness", y = "") + 
+     scale_y_continuous(limits = c(0, 1), expand = c(0, 0, 0.05, 0)) + 
+     coord_flip()
+   
+   plt <- cowplot::plot_grid(
+     cowplot::ggdraw() +
+       cowplot::draw_image(paste0(tmpdir, "/gviz", rn, ".png")),
+     cowplot::plot_grid(p2, p3, nrow = 1, rel_widths = c(1, 0.45),
+                        align = "h", axis = "b"),
+     ncol = 1, rel_heights = c(1, 0.7), labels = ""
+   )
+   unlink(paste0(tmpdir, "/gviz", rn, ".png"))
+   plt
+ }
> 
> pdf(outpdf, width = 8.5, height = 6)
> print(plot_gene_model(gr = gr, bwf = bwf, bwc = bwc, showgene = showgene,
+                       sumdfg = sumdf_bygene, methodsdf = methods_short,
+                       uniq = uniq))
> dev.off()
null device 
          1 
> 
> date()
[1] "Mon Feb  3 19:48:27 2020"
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /tungstenfs/groups/gbioinfo/Appz/easybuild/software/OpenBLAS/0.3.7-GCC-8.3.0/lib/libopenblas_skylakex-r0.3.7.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] SingleCellExperiment_1.8.0  SummarizedExperiment_1.16.1
 [3] DelayedArray_0.12.2         BiocParallel_1.20.1        
 [5] matrixStats_0.55.0          Biobase_2.46.0             
 [7] GenomicRanges_1.38.0        GenomeInfoDb_1.22.0        
 [9] IRanges_2.20.2              S4Vectors_0.24.3           
[11] BiocGenerics_0.32.0         magick_2.3                 
[13] dplyr_0.8.4                 cowplot_1.0.0              
[15] ggplot2_3.2.1               swissknife_0.17            

loaded via a namespace (and not attached):
 [1] ProtGenerics_1.18.0      bitops_1.0-6             bit64_0.9-7             
 [4] RColorBrewer_1.1-2       progress_1.2.2           httr_1.4.1              
 [7] tools_3.6.1              backports_1.1.5          R6_2.4.1                
[10] KernSmooth_2.23-16       rpart_4.1-15             Hmisc_4.3-0             
[13] DBI_1.1.0                lazyeval_0.2.2           Gviz_1.30.1             
[16] colorspace_1.4-1         nnet_7.3-12              withr_2.1.2             
[19] tidyselect_1.0.0         gridExtra_2.3            prettyunits_1.1.1       
[22] bit_1.1-15.1             curl_4.3                 compiler_3.6.1          
[25] iotools_0.2-5            htmlTable_1.13.3         labeling_0.3            
[28] rtracklayer_1.46.0       scales_1.1.0             checkmate_1.9.4         
[31] askpass_1.1              rappdirs_0.3.1           stringr_1.4.0           
[34] digest_0.6.23            Rsamtools_2.2.1          foreign_0.8-72          
[37] sparsesvd_0.2            XVector_0.26.0           dichromat_2.0-0         
[40] base64enc_0.1-3          jpeg_0.1-8.1             pkgconfig_2.0.3         
[43] htmltools_0.4.0          ensembldb_2.10.2         BSgenome_1.54.0         
[46] dbplyr_1.4.2             wordspace_0.2-6          htmlwidgets_1.5.1       
[49] rlang_0.4.4              rstudioapi_0.10          RSQLite_2.2.0           
[52] farver_2.0.3             acepack_1.4.1            VariantAnnotation_1.32.0
[55] RCurl_1.98-1.1           magrittr_1.5             GenomeInfoDbData_1.2.2  
[58] Formula_1.2-3            Matrix_1.2-18            Rcpp_1.0.3              
[61] munsell_0.5.0            lifecycle_0.1.0          stringi_1.4.5           
[64] MASS_7.3-51.4            zlibbioc_1.32.0          BiocFileCache_1.10.2    
[67] grid_3.6.1               blob_1.2.1               crayon_1.3.4            
[70] lattice_0.20-38          Biostrings_2.54.0        splines_3.6.1           
[73] GenomicFeatures_1.38.1   hms_0.5.3                knitr_1.27              
[76] pillar_1.4.3             biomaRt_2.42.0           XML_3.99-0.3            
[79] glue_1.3.1               biovizBase_1.34.1        latticeExtra_0.6-29     
[82] data.table_1.12.8        png_0.1-7                vctrs_0.2.2             
[85] tidyr_1.0.2              gtable_0.3.0             openssl_1.4.1           
[88] purrr_0.3.3              assertthat_0.2.1         xfun_0.12               
[91] AnnotationFilter_1.10.0  survival_3.1-8           tibble_2.1.3            
[94] GenomicAlignments_1.22.1 AnnotationDbi_1.48.0     memoise_1.1.0           
[97] cluster_2.1.0            ellipsis_0.3.0          
> 
> proc.time()
   user  system elapsed 
196.688   9.534 204.962 
