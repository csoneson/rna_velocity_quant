
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in seq_len(length(args))) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages({
+   library(Biostrings)
+   library(dplyr)
+   library(tidyr)
+   library(GenomicFeatures)
+   library(ggplot2)
+   library(cowplot)
+ })
> 
> print(txomefa)
[1] "/tungstenfs/groups/gbioinfo/DB/GENCODE/Mouse/release_M21/gencode.vM21.transcripts.fa"
> print(gtffile)
[1] "/tungstenfs/groups/gbioinfo/DB/GENCODE/Mouse/release_M21/gencode.vM21.annotation.gtf"
> print(refdir)
[1] "reference"
> print(flanklength)
[1] 90
> print(outrds)
[1] "plots/misc/plot_busparse_prepref.rds"
> 
> ## ----------------------------------------------------------------------------
> ## Read reference files
> ## ----------------------------------------------------------------------------
> ## Transcriptome
> txome <- Biostrings::readDNAStringSet(txomefa)
> names(txome) <- sapply(strsplit(names(txome), "\\|"), .subset, 1)
> 
> ## gtf file
> gtf <- rtracklayer::import(gtffile)
> 
> ## get the strand and the number of exons for each transcript
> gtftx <- as.data.frame(gtf) %>% 
+   dplyr::filter(type == "exon") %>%
+   dplyr::group_by(transcript_id) %>%
+   dplyr::mutate(strand = as.character(strand)) %>% 
+   dplyr::summarize(nbr_exons = length(type), 
+                    strand = unique(strand))
> 
> ## get the number of transcripts for each gene
> gtfg <- as.data.frame(gtf) %>%
+   dplyr::filter(type == "transcript") %>% 
+   dplyr::group_by(gene_id) %>%
+   dplyr::summarize(nbr_tx = length(type))
> 
> ## transcript-to-gene mapping for genes with a single isoform
> gtfg1 <- as.data.frame(subset(gtf, gene_id %in% gtfg$gene_id[gtfg$nbr_tx == 1] & type == "transcript")) %>%
+   dplyr::select(gene_id, transcript_id)
> 
> ## construct txdb and group exons and introns by transcript/gene
> txdb <- GenomicFeatures::makeTxDbFromGFF(gtffile)
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
Warning message:
In .get_cds_IDX(mcols0$type, mcols0$phase) :
  The "phase" metadata column contains non-NA values for features of type
  stop_codon. This information was ignored.
> ebt <- GenomicFeatures::exonsBy(txdb, "tx", use.names = TRUE)
> ebg <- GenomicFeatures::exonsBy(txdb, "gene")
> ibt <- GenomicFeatures::intronsByTranscript(txdb, use.names = TRUE)
> 
> ## ----------------------------------------------------------------------------
> ## Read extracted transcript and intron sequences
> ## ----------------------------------------------------------------------------
> busparse_separate <- Biostrings::readDNAStringSet(
+   file.path(refdir, "busparse_isoseparate/cDNA_introns.fa.gz")
+ )
> names(busparse_separate) <- gsub("\\.-I", "-I", gsub("\\.$", "", names(busparse_separate)))
> prepref_separate <- Biostrings::readDNAStringSet(
+   file.path(refdir, "prepref_isoseparate/cDNA_introns.fa.gz")
+ )
> busparse_collapse <- Biostrings::readDNAStringSet(
+   file.path(refdir, "busparse_isocollapse/cDNA_introns.fa.gz")
+ )
> names(busparse_collapse) <- gsub("\\.-I", "-I", gsub("\\.$", "", names(busparse_collapse)))
> prepref_collapse <- Biostrings::readDNAStringSet(
+   file.path(refdir, "prepref_isocollapse/cDNA_introns.fa.gz")
+ )
> 
> ## ----------------------------------------------------------------------------
> ## Compare extracted transcripts to annotated ones
> ## ----------------------------------------------------------------------------
> gtftx <- gtftx[match(names(txome), gtftx$transcript_id), ]
> busparse_separate_txome <- busparse_separate[match(names(txome), names(busparse_separate))]
> prepref_separate_txome <- prepref_separate[match(names(txome), names(prepref_separate))]
> busparse_collapse_txome <- busparse_collapse[match(names(txome), names(busparse_collapse))]
> prepref_collapse_txome <- prepref_collapse[match(names(txome), names(prepref_collapse))]
> 
> busparse_separate_tb <- 
+   table(correct_seq = factor(busparse_separate_txome == txome, levels = c(FALSE, TRUE)), 
+         single_exon = gtftx$nbr_exons == 1, strand = gtftx$strand)
> prepref_separate_tb <- 
+   table(correct_seq = factor(prepref_separate_txome == txome, levels = c(FALSE, TRUE)),
+         single_exon = gtftx$nbr_exons == 1, strand = gtftx$strand)
> busparse_collapse_tb <- 
+   table(correct_seq = factor(busparse_collapse_txome == txome, levels = c(FALSE, TRUE)), 
+         single_exon = gtftx$nbr_exons == 1, strand = gtftx$strand)
> prepref_collapse_tb <- 
+   table(correct_seq = factor(prepref_collapse_txome == txome, levels = c(FALSE, TRUE)),
+         single_exon = gtftx$nbr_exons == 1, strand = gtftx$strand)
> 
> dftx <- dplyr::bind_rows(
+   as.data.frame(busparse_separate_tb) %>% dplyr::mutate(type = "separate", method = "BUSpaRse"),
+   as.data.frame(prepref_separate_tb) %>% dplyr::mutate(type = "separate", method = "prepref"),
+   as.data.frame(busparse_collapse_tb) %>% dplyr::mutate(type = "collapse", method = "BUSpaRse"),
+   as.data.frame(prepref_collapse_tb) %>% dplyr::mutate(type = "collapse", method = "prepref")
+ )
> 
> g1 <- ggplot(
+   dftx %>% dplyr::mutate(single_exon = ifelse(single_exon == TRUE, "Single exon", "Multiple exons")) %>%
+     dplyr::mutate(strand = ifelse(strand == "+", "Positive strand", "Negative strand")) %>%
+     dplyr::mutate(correct_seq = ifelse(correct_seq == TRUE, "Correct", "Incorrect")), 
+   aes(x = method, y = Freq, fill = correct_seq)) + geom_bar(stat = "identity") + 
+   facet_grid(type ~ paste(single_exon, strand, sep = ", ")) + 
+   theme_bw() + 
+   theme(legend.position = "bottom") + 
+   labs(y = "Number of transcripts", title = "Transcripts") + 
+   scale_fill_manual(values = c(Incorrect = "pink", Correct = "lightblue"), name = "Inferred sequence")
> 
> ## ----------------------------------------------------------------------------
> ## Compare lengths of extracted introns to annotated ones 
> ## (all transcripts for separate, genes with single transcripts for collapse)
> ## ----------------------------------------------------------------------------
> ## Separate
> ## ----------------------------------------------------------------------------
> intrs_separate <- grep("-I", names(busparse_separate), value = TRUE)
> stopifnot(all(intrs_separate %in% names(prepref_separate)))
> busparse_separate_intrs <- busparse_separate[match(intrs_separate, names(busparse_separate))]
> prepref_separate_intrs <- prepref_separate[match(intrs_separate, names(prepref_separate))]
> 
> ## Example of problematic transcript
> ebt$ENSMUST00000195885.1
GRanges object with 4 ranges and 3 metadata columns:
      seqnames            ranges strand |   exon_id            exon_name
         <Rle>         <IRanges>  <Rle> | <integer>          <character>
  [1]     chrY 17925524-17926162      - |    523237 ENSMUSE00001337201.1
  [2]     chrY 17924855-17925040      - |    523236 ENSMUSE00001340189.1
  [3]     chrY 17923944-17924127      - |    523235 ENSMUSE00001344563.1
  [4]     chrY 17922928-17923417      - |    523234 ENSMUSE00001336644.1
      exon_rank
      <integer>
  [1]         1
  [2]         2
  [3]         3
  [4]         4
  -------
  seqinfo: 22 sequences (1 circular) from an unspecified genome; no seqlengths
> busparse_separate_intrs[grep("ENSMUST00000195885.1", names(busparse_separate_intrs))]
  A DNAStringSet instance of length 3
    width seq                                               names               
[1] 10571 CGGAAGTGATGCAAATACGGGAC...AGAAACTGCACAGGCAGACAGTG ENSMUST0000019588...
[2]  1213 TTAGCGAGCTCTGCGCAGGCGCA...TGATGCAAATACGGGACTTCTTA ENSMUST0000019588...
[3]  1737 CAGGGAGCCCGCGTGGCCCCTGT...ACCCAGAAAGCGAGAGTGAAGAG ENSMUST0000019588...
> prepref_separate_intrs[grep("ENSMUST00000195885.1", names(prepref_separate_intrs))]
  A DNAStringSet instance of length 3
    width seq                                               names               
[1]   706 CCACATTTACTACAGTGGACAGA...CGATGGATTGTTTCCAAACTTAG ENSMUST0000019588...
[2]   907 AAGACTTCTAAGATTGTTGTCAT...GTACTCAGACTGCTTCCTGATCT ENSMUST0000019588...
[3]   663 ACACGACATAAAATATGTGGATT...CCAGAAACTACTACATTACACCC ENSMUST0000019588...
> 
> ## Get introns per transcript and extract their lengths
> ann_intr <- sapply(ibt, function(w) paste(sort(width(w) + 2 * flanklength), collapse = ","))
> busparse_separate_widths <- sapply(
+   split(width(busparse_separate_intrs), 
+         f = sapply(strsplit(names(busparse_separate_intrs), "-"), .subset, 1)), 
+   function(w) paste(sort(w), collapse = ","))
> prepref_separate_widths <- sapply(
+   split(width(prepref_separate_intrs), 
+         f = sapply(strsplit(names(prepref_separate_intrs), "-"), .subset, 1)), 
+   function(w) paste(sort(w), collapse = ","))
> busparse_separate_widths <- busparse_separate_widths[match(names(ann_intr), names(busparse_separate_widths))]
> prepref_separate_widths <- prepref_separate_widths[match(names(ann_intr), names(prepref_separate_widths))]
> gtfintr <- gtftx[match(names(ann_intr), gtftx$transcript_id), ]
> 
> busparse_separate_tb <- 
+   table(correct_length = factor(busparse_separate_widths == ann_intr, levels = c(FALSE, TRUE)), 
+         single_exon = gtfintr$nbr_exons == 1, strand = gtfintr$strand)
> prepref_separate_tb <- 
+   table(correct_length = factor(prepref_separate_widths == ann_intr, levels = c(FALSE, TRUE)),
+         single_exon = gtfintr$nbr_exons == 1, strand = gtfintr$strand)
> 
> ## Collapse
> ## ----------------------------------------------------------------------------
> intrs_collapse <- grep("-I", names(busparse_collapse), value = TRUE)
> stopifnot(all(intrs_collapse %in% names(prepref_collapse)))
> busparse_collapse_intrs <- busparse_collapse[match(intrs_collapse, names(busparse_collapse))]
> prepref_collapse_intrs <- prepref_collapse[match(intrs_collapse, names(prepref_collapse))]
> 
> ## Example of problematic gene
> ebg$ENSMUSG00000103757.1
GRanges object with 4 ranges and 2 metadata columns:
      seqnames            ranges strand |   exon_id            exon_name
         <Rle>         <IRanges>  <Rle> | <integer>          <character>
  [1]     chrY 17922928-17923417      - |    523234 ENSMUSE00001336644.1
  [2]     chrY 17923944-17924127      - |    523235 ENSMUSE00001344563.1
  [3]     chrY 17924855-17925040      - |    523236 ENSMUSE00001340189.1
  [4]     chrY 17925524-17926162      - |    523237 ENSMUSE00001337201.1
  -------
  seqinfo: 22 sequences (1 circular) from an unspecified genome; no seqlengths
> busparse_collapse_intrs[grep("ENSMUSG00000103757.1", names(busparse_collapse_intrs))]
  A DNAStringSet instance of length 3
    width seq                                               names               
[1]  3271 TGTGTTTCACTACAGAATTTGAA...TTCTACATCTTTTACAACACGCT ENSMUSG0000010375...
[2]  1839 GGAGTCATCACACTATGGATTCT...CCTCTCTATCTTTTGCCTAAAGA ENSMUSG0000010375...
[3]   374 AGGCCTAAACTCAGCCGCAGACA...CACCCCACCCCACATCAAGCCAG ENSMUSG0000010375...
> prepref_collapse_intrs[grep("ENSMUSG00000103757.1", names(prepref_collapse_intrs))]
  A DNAStringSet instance of length 3
    width seq                                               names               
[1]   706 CCACATTTACTACAGTGGACAGA...CGATGGATTGTTTCCAAACTTAG ENSMUSG0000010375...
[2]   907 AAGACTTCTAAGATTGTTGTCAT...GTACTCAGACTGCTTCCTGATCT ENSMUSG0000010375...
[3]   663 ACACGACATAAAATATGTGGATT...CCAGAAACTACTACATTACACCC ENSMUSG0000010375...
> 
> ## Get introns per gene and extract their lengths
> busparse_collapse_widths <- sapply(
+   split(width(busparse_collapse_intrs), 
+         f = sapply(strsplit(names(busparse_collapse_intrs), "-"), .subset, 1)), 
+   function(w) paste(sort(w), collapse = ","))
> prepref_collapse_widths <- sapply(
+   split(width(prepref_collapse_intrs), 
+         f = sapply(strsplit(names(prepref_collapse_intrs), "-"), .subset, 1)), 
+   function(w) paste(sort(w), collapse = ","))
> 
> ## Transcripts from genes with a single transcript
> ints <- intersect(gtfg1$transcript_id, names(ann_intr))
> ann_intr1 <- ann_intr[match(ints, names(ann_intr))]
> single_tx_genes <- gtfg1$gene_id[match(names(ann_intr1), gtfg1$transcript_id)]
> busparse_collapse_widths <- busparse_collapse_widths[match(single_tx_genes, names(busparse_collapse_widths))]
> busparse_collapse_widths[is.na(busparse_collapse_widths)] <- ""
> prepref_collapse_widths <- prepref_collapse_widths[match(single_tx_genes, names(prepref_collapse_widths))]
> prepref_collapse_widths[is.na(prepref_collapse_widths)] <- ""
> 
> gtfintr <- gtftx[match(names(ann_intr1), gtftx$transcript_id), ]
> 
> busparse_collapse_tb <- 
+   table(correct_length = factor(busparse_collapse_widths == ann_intr1, levels = c(FALSE, TRUE)), 
+         single_exon = gtfintr$nbr_exons == 1, strand = gtfintr$strand)
> prepref_collapse_tb <- 
+   table(correct_length = factor(prepref_collapse_widths == ann_intr1, levels = c(FALSE, TRUE)),
+         single_exon = gtfintr$nbr_exons == 1, strand = gtfintr$strand)
> 
> 
> dfintr <- dplyr::bind_rows(
+   as.data.frame(busparse_separate_tb) %>% dplyr::mutate(type = "separate", method = "BUSpaRse"),
+   as.data.frame(prepref_separate_tb) %>% dplyr::mutate(type = "separate", method = "prepref"),
+   as.data.frame(busparse_collapse_tb) %>% dplyr::mutate(type = "collapse", method = "BUSpaRse"),
+   as.data.frame(prepref_collapse_tb) %>% dplyr::mutate(type = "collapse", method = "prepref")
+ )
> 
> g2 <- ggplot(dfintr %>% dplyr::filter(type == "separate") %>% 
+          dplyr::mutate(single_exon = ifelse(single_exon == TRUE, "Single exon", "Multiple exons")) %>%
+          dplyr::mutate(strand = ifelse(strand == "+", "Positive strand", "Negative strand")) %>%
+          dplyr::mutate(correct_length = ifelse(correct_length == TRUE, "Correct", "Incorrect")) %>%
+          dplyr::filter(single_exon == "Multiple exons"), 
+        aes(x = method, y = Freq, fill = correct_length)) + geom_bar(stat = "identity") + 
+   facet_grid(type ~ paste(single_exon, strand, sep = ", ")) + 
+   theme_bw() + 
+   theme(legend.position = "bottom") + 
+   labs(y = "Number of transcripts", title = "Introns") + 
+   scale_fill_manual(values = c(Incorrect = "pink", Correct = "lightblue"), name = "Inferred intron lengths")
> g3 <- ggplot(dfintr %>% dplyr::filter(type == "collapse") %>% 
+                dplyr::mutate(single_exon = ifelse(single_exon == TRUE, "Single exon", "Multiple exons")) %>%
+                dplyr::mutate(strand = ifelse(strand == "+", "Positive strand", "Negative strand")) %>%
+                dplyr::mutate(correct_length = ifelse(correct_length == TRUE, "Correct", "Incorrect")) %>%
+                dplyr::filter(single_exon == "Multiple exons"), 
+              aes(x = method, y = Freq, fill = correct_length)) + geom_bar(stat = "identity") + 
+   facet_grid(type ~ paste(single_exon, strand, sep = ", ")) + 
+   theme_bw() + 
+   theme(legend.position = "bottom") + 
+   labs(y = "Number of genes", title = "Introns") + 
+   scale_fill_manual(values = c(Incorrect = "pink", Correct = "lightblue"), name = "Inferred intron lengths")
> 
> pdf(gsub("rds$", "pdf", outrds), width = 11, height = 9)
> cowplot::plot_grid(g1, cowplot::plot_grid(g2, g3, nrow = 1, labels = c("B", "C")), ncol = 1, labels = c("A", ""), rel_heights = c(0.8, 0.55))
> dev.off()
null device 
          1 
> 
> saveRDS(list(dftx = dftx, dfintr = dfintr), file = outrds)
> 
> date()
[1] "Fri Nov 29 12:00:33 2019"
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /tungstenfs/groups/gbioinfo/Appz/easybuild/software/OpenBLAS/0.3.7-GCC-8.3.0/lib/libopenblas_skylakexp-r0.3.7.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats4    parallel  stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] cowplot_1.0.0          ggplot2_3.2.1          GenomicFeatures_1.38.0
 [4] AnnotationDbi_1.48.0   Biobase_2.46.0         GenomicRanges_1.38.0  
 [7] GenomeInfoDb_1.22.0    tidyr_1.0.0            dplyr_0.8.3           
[10] Biostrings_2.54.0      XVector_0.26.0         IRanges_2.20.1        
[13] S4Vectors_0.24.0       BiocGenerics_0.32.0   

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.3                  lattice_0.20-38            
 [3] prettyunits_1.0.2           Rsamtools_2.2.1            
 [5] assertthat_0.2.1            zeallot_0.1.0              
 [7] digest_0.6.23               BiocFileCache_1.10.2       
 [9] plyr_1.8.4                  R6_2.4.1                   
[11] backports_1.1.5             RSQLite_2.1.2              
[13] httr_1.4.1                  pillar_1.4.2               
[15] zlibbioc_1.32.0             rlang_0.4.2                
[17] progress_1.2.2              lazyeval_0.2.2             
[19] curl_4.2                    blob_1.2.0                 
[21] Matrix_1.2-17               labeling_0.3               
[23] BiocParallel_1.20.0         stringr_1.4.0              
[25] RCurl_1.95-4.12             bit_1.1-14                 
[27] biomaRt_2.42.0              munsell_0.5.0              
[29] DelayedArray_0.12.0         compiler_3.6.1             
[31] rtracklayer_1.46.0          pkgconfig_2.0.3            
[33] askpass_1.1                 openssl_1.4.1              
[35] tidyselect_0.2.5            SummarizedExperiment_1.16.0
[37] tibble_2.1.3                GenomeInfoDbData_1.2.2     
[39] matrixStats_0.55.0          XML_3.98-1.20              
[41] crayon_1.3.4                dbplyr_1.4.2               
[43] withr_2.1.2                 GenomicAlignments_1.22.1   
[45] bitops_1.0-6                rappdirs_0.3.1             
[47] grid_3.6.1                  gtable_0.3.0               
[49] lifecycle_0.1.0             DBI_1.0.0                  
[51] magrittr_1.5                scales_1.1.0               
[53] stringi_1.4.3               farver_2.0.1               
[55] reshape2_1.4.3              vctrs_0.2.0                
[57] tools_3.6.1                 bit64_0.9-7                
[59] glue_1.3.1                  purrr_0.3.3                
[61] hms_0.5.2                   colorspace_1.4-1           
[63] memoise_1.1.0              
> 
> proc.time()
    user   system  elapsed 
1118.319  304.621 1426.411 
